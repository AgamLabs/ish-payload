/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:db-schema` to regenerate this file.
 */

import {
  pgTable,
  index,
  uniqueIndex,
  foreignKey,
  integer,
  serial,
  varchar,
  numeric,
  timestamp,
  boolean,
  text,
  jsonb,
  type AnyPgColumn,
  pgEnum,
} from "@payloadcms/db-vercel-postgres/drizzle/pg-core";
import { sql, relations } from "@payloadcms/db-vercel-postgres/drizzle";
export const enum_users_roles = pgEnum("enum_users_roles", [
  "admin",
  "customer",
]);
export const enum_products_blocks_cta_links_link_type = pgEnum(
  "enum_products_blocks_cta_links_link_type",
  ["reference", "custom"],
);
export const enum_products_blocks_cta_links_link_appearance = pgEnum(
  "enum_products_blocks_cta_links_link_appearance",
  ["default", "outline"],
);
export const enum_products_blocks_content_columns_size = pgEnum(
  "enum_products_blocks_content_columns_size",
  ["oneThird", "half", "twoThirds", "full"],
);
export const enum_products_blocks_content_columns_link_type = pgEnum(
  "enum_products_blocks_content_columns_link_type",
  ["reference", "custom"],
);
export const enum_products_blocks_content_columns_link_appearance = pgEnum(
  "enum_products_blocks_content_columns_link_appearance",
  ["default", "outline"],
);
export const enum_products_status = pgEnum("enum_products_status", [
  "draft",
  "published",
]);
export const enum__products_v_blocks_cta_links_link_type = pgEnum(
  "enum__products_v_blocks_cta_links_link_type",
  ["reference", "custom"],
);
export const enum__products_v_blocks_cta_links_link_appearance = pgEnum(
  "enum__products_v_blocks_cta_links_link_appearance",
  ["default", "outline"],
);
export const enum__products_v_blocks_content_columns_size = pgEnum(
  "enum__products_v_blocks_content_columns_size",
  ["oneThird", "half", "twoThirds", "full"],
);
export const enum__products_v_blocks_content_columns_link_type = pgEnum(
  "enum__products_v_blocks_content_columns_link_type",
  ["reference", "custom"],
);
export const enum__products_v_blocks_content_columns_link_appearance = pgEnum(
  "enum__products_v_blocks_content_columns_link_appearance",
  ["default", "outline"],
);
export const enum__products_v_version_status = pgEnum(
  "enum__products_v_version_status",
  ["draft", "published"],
);
export const enum_pages_hero_links_link_type = pgEnum(
  "enum_pages_hero_links_link_type",
  ["reference", "custom"],
);
export const enum_pages_hero_links_link_appearance = pgEnum(
  "enum_pages_hero_links_link_appearance",
  ["default", "outline"],
);
export const enum_pages_blocks_cta_links_link_type = pgEnum(
  "enum_pages_blocks_cta_links_link_type",
  ["reference", "custom"],
);
export const enum_pages_blocks_cta_links_link_appearance = pgEnum(
  "enum_pages_blocks_cta_links_link_appearance",
  ["default", "outline"],
);
export const enum_pages_blocks_content_columns_size = pgEnum(
  "enum_pages_blocks_content_columns_size",
  ["oneThird", "half", "twoThirds", "full"],
);
export const enum_pages_blocks_content_columns_link_type = pgEnum(
  "enum_pages_blocks_content_columns_link_type",
  ["reference", "custom"],
);
export const enum_pages_blocks_content_columns_link_appearance = pgEnum(
  "enum_pages_blocks_content_columns_link_appearance",
  ["default", "outline"],
);
export const enum_pages_blocks_archive_populate_by = pgEnum(
  "enum_pages_blocks_archive_populate_by",
  ["collection", "selection"],
);
export const enum_pages_blocks_archive_relation_to = pgEnum(
  "enum_pages_blocks_archive_relation_to",
  ["products"],
);
export const enum_pages_blocks_carousel_populate_by = pgEnum(
  "enum_pages_blocks_carousel_populate_by",
  ["collection", "selection"],
);
export const enum_pages_blocks_carousel_relation_to = pgEnum(
  "enum_pages_blocks_carousel_relation_to",
  ["products"],
);
export const enum_pages_blocks_banner_style = pgEnum(
  "enum_pages_blocks_banner_style",
  ["info", "warning", "error", "success"],
);
export const enum_pages_hero_type = pgEnum("enum_pages_hero_type", [
  "none",
  "highImpact",
  "mediumImpact",
  "lowImpact",
  "customHero",
]);
export const enum_pages_status = pgEnum("enum_pages_status", [
  "draft",
  "published",
]);
export const enum__pages_v_version_hero_links_link_type = pgEnum(
  "enum__pages_v_version_hero_links_link_type",
  ["reference", "custom"],
);
export const enum__pages_v_version_hero_links_link_appearance = pgEnum(
  "enum__pages_v_version_hero_links_link_appearance",
  ["default", "outline"],
);
export const enum__pages_v_blocks_cta_links_link_type = pgEnum(
  "enum__pages_v_blocks_cta_links_link_type",
  ["reference", "custom"],
);
export const enum__pages_v_blocks_cta_links_link_appearance = pgEnum(
  "enum__pages_v_blocks_cta_links_link_appearance",
  ["default", "outline"],
);
export const enum__pages_v_blocks_content_columns_size = pgEnum(
  "enum__pages_v_blocks_content_columns_size",
  ["oneThird", "half", "twoThirds", "full"],
);
export const enum__pages_v_blocks_content_columns_link_type = pgEnum(
  "enum__pages_v_blocks_content_columns_link_type",
  ["reference", "custom"],
);
export const enum__pages_v_blocks_content_columns_link_appearance = pgEnum(
  "enum__pages_v_blocks_content_columns_link_appearance",
  ["default", "outline"],
);
export const enum__pages_v_blocks_archive_populate_by = pgEnum(
  "enum__pages_v_blocks_archive_populate_by",
  ["collection", "selection"],
);
export const enum__pages_v_blocks_archive_relation_to = pgEnum(
  "enum__pages_v_blocks_archive_relation_to",
  ["products"],
);
export const enum__pages_v_blocks_carousel_populate_by = pgEnum(
  "enum__pages_v_blocks_carousel_populate_by",
  ["collection", "selection"],
);
export const enum__pages_v_blocks_carousel_relation_to = pgEnum(
  "enum__pages_v_blocks_carousel_relation_to",
  ["products"],
);
export const enum__pages_v_blocks_banner_style = pgEnum(
  "enum__pages_v_blocks_banner_style",
  ["info", "warning", "error", "success"],
);
export const enum__pages_v_version_hero_type = pgEnum(
  "enum__pages_v_version_hero_type",
  ["none", "highImpact", "mediumImpact", "lowImpact", "customHero"],
);
export const enum__pages_v_version_status = pgEnum(
  "enum__pages_v_version_status",
  ["draft", "published"],
);
export const enum_orders_payment_status = pgEnum("enum_orders_payment_status", [
  "pending",
  "completed",
  "failed",
  "refunded",
]);
export const enum_redirects_to_type = pgEnum("enum_redirects_to_type", [
  "reference",
  "custom",
]);
export const enum_forms_confirmation_type = pgEnum(
  "enum_forms_confirmation_type",
  ["message", "redirect"],
);
export const enum_footer_nav_items_link_type = pgEnum(
  "enum_footer_nav_items_link_type",
  ["reference", "custom"],
);
export const enum_header_nav_items_link_type = pgEnum(
  "enum_header_nav_items_link_type",
  ["reference", "custom"],
);

export const users_roles = pgTable(
  "users_roles",
  {
    order: integer("order").notNull(),
    parent: integer("parent_id").notNull(),
    value: enum_users_roles("value"),
    id: serial("id").primaryKey(),
  },
  (columns) => ({
    orderIdx: index("users_roles_order_idx").on(columns.order),
    parentIdx: index("users_roles_parent_idx").on(columns.parent),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [users.id],
      name: "users_roles_parent_fk",
    }).onDelete("cascade"),
  }),
);

export const users_cart_items = pgTable(
  "users_cart_items",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    product: integer("product_id").references(() => products.id, {
      onDelete: "set null",
    }),
    variantID: varchar("variant_i_d"),
    variant: varchar("variant"),
    unitPrice: numeric("unit_price").notNull(),
    quantity: numeric("quantity").notNull(),
    url: varchar("url"),
  },
  (columns) => ({
    _orderIdx: index("users_cart_items_order_idx").on(columns._order),
    _parentIDIdx: index("users_cart_items_parent_id_idx").on(columns._parentID),
    users_cart_items_product_idx: index("users_cart_items_product_idx").on(
      columns.product,
    ),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [users.id],
      name: "users_cart_items_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const users = pgTable(
  "users",
  {
    id: serial("id").primaryKey(),
    name: varchar("name"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    email: varchar("email").notNull(),
    resetPasswordToken: varchar("reset_password_token"),
    resetPasswordExpiration: timestamp("reset_password_expiration", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    salt: varchar("salt"),
    hash: varchar("hash"),
    loginAttempts: numeric("login_attempts").default("0"),
    lockUntil: timestamp("lock_until", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
  },
  (columns) => ({
    users_updated_at_idx: index("users_updated_at_idx").on(columns.updatedAt),
    users_created_at_idx: index("users_created_at_idx").on(columns.createdAt),
    users_email_idx: uniqueIndex("users_email_idx").on(columns.email),
  }),
);

export const products_blocks_cta_links = pgTable(
  "products_blocks_cta_links",
  {
    _order: integer("_order").notNull(),
    _parentID: varchar("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    link_type:
      enum_products_blocks_cta_links_link_type("link_type").default(
        "reference",
      ),
    link_newTab: boolean("link_new_tab"),
    link_url: varchar("link_url"),
    link_label: varchar("link_label"),
    link_appearance:
      enum_products_blocks_cta_links_link_appearance("link_appearance").default(
        "default",
      ),
  },
  (columns) => ({
    _orderIdx: index("products_blocks_cta_links_order_idx").on(columns._order),
    _parentIDIdx: index("products_blocks_cta_links_parent_id_idx").on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [products_blocks_cta.id],
      name: "products_blocks_cta_links_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const products_blocks_cta = pgTable(
  "products_blocks_cta",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    richText: jsonb("rich_text"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("products_blocks_cta_order_idx").on(columns._order),
    _parentIDIdx: index("products_blocks_cta_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("products_blocks_cta_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [products.id],
      name: "products_blocks_cta_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const products_blocks_content_columns = pgTable(
  "products_blocks_content_columns",
  {
    _order: integer("_order").notNull(),
    _parentID: varchar("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    size: enum_products_blocks_content_columns_size("size").default("oneThird"),
    richText: jsonb("rich_text"),
    enableLink: boolean("enable_link"),
    link_type:
      enum_products_blocks_content_columns_link_type("link_type").default(
        "reference",
      ),
    link_newTab: boolean("link_new_tab"),
    link_url: varchar("link_url"),
    link_label: varchar("link_label"),
    link_appearance:
      enum_products_blocks_content_columns_link_appearance(
        "link_appearance",
      ).default("default"),
  },
  (columns) => ({
    _orderIdx: index("products_blocks_content_columns_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index("products_blocks_content_columns_parent_id_idx").on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [products_blocks_content.id],
      name: "products_blocks_content_columns_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const products_blocks_content = pgTable(
  "products_blocks_content",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("products_blocks_content_order_idx").on(columns._order),
    _parentIDIdx: index("products_blocks_content_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("products_blocks_content_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [products.id],
      name: "products_blocks_content_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const products_blocks_media_block = pgTable(
  "products_blocks_media_block",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    media: integer("media_id").references(() => media.id, {
      onDelete: "set null",
    }),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("products_blocks_media_block_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index("products_blocks_media_block_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("products_blocks_media_block_path_idx").on(columns._path),
    products_blocks_media_block_media_idx: index(
      "products_blocks_media_block_media_idx",
    ).on(columns.media),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [products.id],
      name: "products_blocks_media_block_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const products_variants_options_values = pgTable(
  "products_variants_options_values",
  {
    _order: integer("_order").notNull(),
    _parentID: varchar("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    label: varchar("label"),
    slug: varchar("slug"),
  },
  (columns) => ({
    _orderIdx: index("products_variants_options_values_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index("products_variants_options_values_parent_id_idx").on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [products_variants_options.id],
      name: "products_variants_options_values_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const products_variants_options = pgTable(
  "products_variants_options",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    label: varchar("label"),
    slug: varchar("slug"),
  },
  (columns) => ({
    _orderIdx: index("products_variants_options_order_idx").on(columns._order),
    _parentIDIdx: index("products_variants_options_parent_id_idx").on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [products.id],
      name: "products_variants_options_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const products_variants_variants_options = pgTable(
  "products_variants_variants_options",
  {
    _order: integer("_order").notNull(),
    _parentID: varchar("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    label: varchar("label"),
    slug: varchar("slug"),
  },
  (columns) => ({
    _orderIdx: index("products_variants_variants_options_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index("products_variants_variants_options_parent_id_idx").on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [products_variants_variants.id],
      name: "products_variants_variants_options_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const products_variants_variants = pgTable(
  "products_variants_variants",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    price: numeric("price"),
    stock: numeric("stock").default("0"),
  },
  (columns) => ({
    _orderIdx: index("products_variants_variants_order_idx").on(columns._order),
    _parentIDIdx: index("products_variants_variants_parent_id_idx").on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [products.id],
      name: "products_variants_variants_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const products = pgTable(
  "products",
  {
    id: serial("id").primaryKey(),
    title: varchar("title"),
    publishedOn: timestamp("published_on", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    description: jsonb("description"),
    enableVariants: boolean("enable_variants"),
    stock: numeric("stock").default("0"),
    price: numeric("price"),
    meta_title: varchar("meta_title"),
    meta_image: integer("meta_image_id").references(() => media.id, {
      onDelete: "set null",
    }),
    meta_description: varchar("meta_description"),
    slug: varchar("slug"),
    skipSync: boolean("skip_sync"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    _status: enum_products_status("_status").default("draft"),
  },
  (columns) => ({
    products_meta_meta_image_idx: index("products_meta_meta_image_idx").on(
      columns.meta_image,
    ),
    products_slug_idx: index("products_slug_idx").on(columns.slug),
    products_updated_at_idx: index("products_updated_at_idx").on(
      columns.updatedAt,
    ),
    products_created_at_idx: index("products_created_at_idx").on(
      columns.createdAt,
    ),
    products__status_idx: index("products__status_idx").on(columns._status),
  }),
);

export const products_rels = pgTable(
  "products_rels",
  {
    id: serial("id").primaryKey(),
    order: integer("order"),
    parent: integer("parent_id").notNull(),
    path: varchar("path").notNull(),
    mediaID: integer("media_id"),
    pagesID: integer("pages_id"),
    productsID: integer("products_id"),
    categoriesID: integer("categories_id"),
  },
  (columns) => ({
    order: index("products_rels_order_idx").on(columns.order),
    parentIdx: index("products_rels_parent_idx").on(columns.parent),
    pathIdx: index("products_rels_path_idx").on(columns.path),
    products_rels_media_id_idx: index("products_rels_media_id_idx").on(
      columns.mediaID,
    ),
    products_rels_pages_id_idx: index("products_rels_pages_id_idx").on(
      columns.pagesID,
    ),
    products_rels_products_id_idx: index("products_rels_products_id_idx").on(
      columns.productsID,
    ),
    products_rels_categories_id_idx: index(
      "products_rels_categories_id_idx",
    ).on(columns.categoriesID),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [products.id],
      name: "products_rels_parent_fk",
    }).onDelete("cascade"),
    mediaIdFk: foreignKey({
      columns: [columns["mediaID"]],
      foreignColumns: [media.id],
      name: "products_rels_media_fk",
    }).onDelete("cascade"),
    pagesIdFk: foreignKey({
      columns: [columns["pagesID"]],
      foreignColumns: [pages.id],
      name: "products_rels_pages_fk",
    }).onDelete("cascade"),
    productsIdFk: foreignKey({
      columns: [columns["productsID"]],
      foreignColumns: [products.id],
      name: "products_rels_products_fk",
    }).onDelete("cascade"),
    categoriesIdFk: foreignKey({
      columns: [columns["categoriesID"]],
      foreignColumns: [categories.id],
      name: "products_rels_categories_fk",
    }).onDelete("cascade"),
  }),
);

export const _products_v_blocks_cta_links = pgTable(
  "_products_v_blocks_cta_links",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: serial("id").primaryKey(),
    link_type:
      enum__products_v_blocks_cta_links_link_type("link_type").default(
        "reference",
      ),
    link_newTab: boolean("link_new_tab"),
    link_url: varchar("link_url"),
    link_label: varchar("link_label"),
    link_appearance:
      enum__products_v_blocks_cta_links_link_appearance(
        "link_appearance",
      ).default("default"),
    _uuid: varchar("_uuid"),
  },
  (columns) => ({
    _orderIdx: index("_products_v_blocks_cta_links_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index("_products_v_blocks_cta_links_parent_id_idx").on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_products_v_blocks_cta.id],
      name: "_products_v_blocks_cta_links_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _products_v_blocks_cta = pgTable(
  "_products_v_blocks_cta",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: serial("id").primaryKey(),
    richText: jsonb("rich_text"),
    _uuid: varchar("_uuid"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("_products_v_blocks_cta_order_idx").on(columns._order),
    _parentIDIdx: index("_products_v_blocks_cta_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("_products_v_blocks_cta_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_products_v.id],
      name: "_products_v_blocks_cta_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _products_v_blocks_content_columns = pgTable(
  "_products_v_blocks_content_columns",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: serial("id").primaryKey(),
    size: enum__products_v_blocks_content_columns_size("size").default(
      "oneThird",
    ),
    richText: jsonb("rich_text"),
    enableLink: boolean("enable_link"),
    link_type:
      enum__products_v_blocks_content_columns_link_type("link_type").default(
        "reference",
      ),
    link_newTab: boolean("link_new_tab"),
    link_url: varchar("link_url"),
    link_label: varchar("link_label"),
    link_appearance:
      enum__products_v_blocks_content_columns_link_appearance(
        "link_appearance",
      ).default("default"),
    _uuid: varchar("_uuid"),
  },
  (columns) => ({
    _orderIdx: index("_products_v_blocks_content_columns_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index("_products_v_blocks_content_columns_parent_id_idx").on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_products_v_blocks_content.id],
      name: "_products_v_blocks_content_columns_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _products_v_blocks_content = pgTable(
  "_products_v_blocks_content",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: serial("id").primaryKey(),
    _uuid: varchar("_uuid"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("_products_v_blocks_content_order_idx").on(columns._order),
    _parentIDIdx: index("_products_v_blocks_content_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("_products_v_blocks_content_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_products_v.id],
      name: "_products_v_blocks_content_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _products_v_blocks_media_block = pgTable(
  "_products_v_blocks_media_block",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: serial("id").primaryKey(),
    media: integer("media_id").references(() => media.id, {
      onDelete: "set null",
    }),
    _uuid: varchar("_uuid"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("_products_v_blocks_media_block_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index("_products_v_blocks_media_block_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("_products_v_blocks_media_block_path_idx").on(
      columns._path,
    ),
    _products_v_blocks_media_block_media_idx: index(
      "_products_v_blocks_media_block_media_idx",
    ).on(columns.media),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_products_v.id],
      name: "_products_v_blocks_media_block_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _products_v_version_variants_options_values = pgTable(
  "_products_v_version_variants_options_values",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: serial("id").primaryKey(),
    label: varchar("label"),
    slug: varchar("slug"),
    _uuid: varchar("_uuid"),
  },
  (columns) => ({
    _orderIdx: index(
      "_products_v_version_variants_options_values_order_idx",
    ).on(columns._order),
    _parentIDIdx: index(
      "_products_v_version_variants_options_values_parent_id_idx",
    ).on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_products_v_version_variants_options.id],
      name: "_products_v_version_variants_options_values_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _products_v_version_variants_options = pgTable(
  "_products_v_version_variants_options",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: serial("id").primaryKey(),
    label: varchar("label"),
    slug: varchar("slug"),
    _uuid: varchar("_uuid"),
  },
  (columns) => ({
    _orderIdx: index("_products_v_version_variants_options_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index(
      "_products_v_version_variants_options_parent_id_idx",
    ).on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_products_v.id],
      name: "_products_v_version_variants_options_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _products_v_version_variants_variants_options = pgTable(
  "_products_v_version_variants_variants_options",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: serial("id").primaryKey(),
    label: varchar("label"),
    slug: varchar("slug"),
    _uuid: varchar("_uuid"),
  },
  (columns) => ({
    _orderIdx: index(
      "_products_v_version_variants_variants_options_order_idx",
    ).on(columns._order),
    _parentIDIdx: index(
      "_products_v_version_variants_variants_options_parent_id_idx",
    ).on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_products_v_version_variants_variants.id],
      name: "_products_v_version_variants_variants_options_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _products_v_version_variants_variants = pgTable(
  "_products_v_version_variants_variants",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: serial("id").primaryKey(),
    price: numeric("price"),
    stock: numeric("stock").default("0"),
    _uuid: varchar("_uuid"),
  },
  (columns) => ({
    _orderIdx: index("_products_v_version_variants_variants_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index(
      "_products_v_version_variants_variants_parent_id_idx",
    ).on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_products_v.id],
      name: "_products_v_version_variants_variants_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _products_v = pgTable(
  "_products_v",
  {
    id: serial("id").primaryKey(),
    parent: integer("parent_id").references(() => products.id, {
      onDelete: "set null",
    }),
    version_title: varchar("version_title"),
    version_publishedOn: timestamp("version_published_on", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    version_description: jsonb("version_description"),
    version_enableVariants: boolean("version_enable_variants"),
    version_stock: numeric("version_stock").default("0"),
    version_price: numeric("version_price"),
    version_meta_title: varchar("version_meta_title"),
    version_meta_image: integer("version_meta_image_id").references(
      () => media.id,
      {
        onDelete: "set null",
      },
    ),
    version_meta_description: varchar("version_meta_description"),
    version_slug: varchar("version_slug"),
    version_skipSync: boolean("version_skip_sync"),
    version_updatedAt: timestamp("version_updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    version_createdAt: timestamp("version_created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    version__status:
      enum__products_v_version_status("version__status").default("draft"),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    latest: boolean("latest"),
    autosave: boolean("autosave"),
  },
  (columns) => ({
    _products_v_parent_idx: index("_products_v_parent_idx").on(columns.parent),
    _products_v_version_meta_version_meta_image_idx: index(
      "_products_v_version_meta_version_meta_image_idx",
    ).on(columns.version_meta_image),
    _products_v_version_version_slug_idx: index(
      "_products_v_version_version_slug_idx",
    ).on(columns.version_slug),
    _products_v_version_version_updated_at_idx: index(
      "_products_v_version_version_updated_at_idx",
    ).on(columns.version_updatedAt),
    _products_v_version_version_created_at_idx: index(
      "_products_v_version_version_created_at_idx",
    ).on(columns.version_createdAt),
    _products_v_version_version__status_idx: index(
      "_products_v_version_version__status_idx",
    ).on(columns.version__status),
    _products_v_created_at_idx: index("_products_v_created_at_idx").on(
      columns.createdAt,
    ),
    _products_v_updated_at_idx: index("_products_v_updated_at_idx").on(
      columns.updatedAt,
    ),
    _products_v_latest_idx: index("_products_v_latest_idx").on(columns.latest),
    _products_v_autosave_idx: index("_products_v_autosave_idx").on(
      columns.autosave,
    ),
  }),
);

export const _products_v_rels = pgTable(
  "_products_v_rels",
  {
    id: serial("id").primaryKey(),
    order: integer("order"),
    parent: integer("parent_id").notNull(),
    path: varchar("path").notNull(),
    mediaID: integer("media_id"),
    pagesID: integer("pages_id"),
    productsID: integer("products_id"),
    categoriesID: integer("categories_id"),
  },
  (columns) => ({
    order: index("_products_v_rels_order_idx").on(columns.order),
    parentIdx: index("_products_v_rels_parent_idx").on(columns.parent),
    pathIdx: index("_products_v_rels_path_idx").on(columns.path),
    _products_v_rels_media_id_idx: index("_products_v_rels_media_id_idx").on(
      columns.mediaID,
    ),
    _products_v_rels_pages_id_idx: index("_products_v_rels_pages_id_idx").on(
      columns.pagesID,
    ),
    _products_v_rels_products_id_idx: index(
      "_products_v_rels_products_id_idx",
    ).on(columns.productsID),
    _products_v_rels_categories_id_idx: index(
      "_products_v_rels_categories_id_idx",
    ).on(columns.categoriesID),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [_products_v.id],
      name: "_products_v_rels_parent_fk",
    }).onDelete("cascade"),
    mediaIdFk: foreignKey({
      columns: [columns["mediaID"]],
      foreignColumns: [media.id],
      name: "_products_v_rels_media_fk",
    }).onDelete("cascade"),
    pagesIdFk: foreignKey({
      columns: [columns["pagesID"]],
      foreignColumns: [pages.id],
      name: "_products_v_rels_pages_fk",
    }).onDelete("cascade"),
    productsIdFk: foreignKey({
      columns: [columns["productsID"]],
      foreignColumns: [products.id],
      name: "_products_v_rels_products_fk",
    }).onDelete("cascade"),
    categoriesIdFk: foreignKey({
      columns: [columns["categoriesID"]],
      foreignColumns: [categories.id],
      name: "_products_v_rels_categories_fk",
    }).onDelete("cascade"),
  }),
);

export const pages_hero_links = pgTable(
  "pages_hero_links",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    link_type:
      enum_pages_hero_links_link_type("link_type").default("reference"),
    link_newTab: boolean("link_new_tab"),
    link_url: varchar("link_url"),
    link_label: varchar("link_label"),
    link_appearance:
      enum_pages_hero_links_link_appearance("link_appearance").default(
        "default",
      ),
  },
  (columns) => ({
    _orderIdx: index("pages_hero_links_order_idx").on(columns._order),
    _parentIDIdx: index("pages_hero_links_parent_id_idx").on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [pages.id],
      name: "pages_hero_links_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const pages_blocks_cta_links = pgTable(
  "pages_blocks_cta_links",
  {
    _order: integer("_order").notNull(),
    _parentID: varchar("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    link_type:
      enum_pages_blocks_cta_links_link_type("link_type").default("reference"),
    link_newTab: boolean("link_new_tab"),
    link_url: varchar("link_url"),
    link_label: varchar("link_label"),
    link_appearance:
      enum_pages_blocks_cta_links_link_appearance("link_appearance").default(
        "default",
      ),
  },
  (columns) => ({
    _orderIdx: index("pages_blocks_cta_links_order_idx").on(columns._order),
    _parentIDIdx: index("pages_blocks_cta_links_parent_id_idx").on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [pages_blocks_cta.id],
      name: "pages_blocks_cta_links_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const pages_blocks_cta = pgTable(
  "pages_blocks_cta",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    richText: jsonb("rich_text"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("pages_blocks_cta_order_idx").on(columns._order),
    _parentIDIdx: index("pages_blocks_cta_parent_id_idx").on(columns._parentID),
    _pathIdx: index("pages_blocks_cta_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [pages.id],
      name: "pages_blocks_cta_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const pages_blocks_content_columns = pgTable(
  "pages_blocks_content_columns",
  {
    _order: integer("_order").notNull(),
    _parentID: varchar("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    size: enum_pages_blocks_content_columns_size("size").default("oneThird"),
    richText: jsonb("rich_text"),
    enableLink: boolean("enable_link"),
    link_type:
      enum_pages_blocks_content_columns_link_type("link_type").default(
        "reference",
      ),
    link_newTab: boolean("link_new_tab"),
    link_url: varchar("link_url"),
    link_label: varchar("link_label"),
    link_appearance:
      enum_pages_blocks_content_columns_link_appearance(
        "link_appearance",
      ).default("default"),
  },
  (columns) => ({
    _orderIdx: index("pages_blocks_content_columns_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index("pages_blocks_content_columns_parent_id_idx").on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [pages_blocks_content.id],
      name: "pages_blocks_content_columns_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const pages_blocks_content = pgTable(
  "pages_blocks_content",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("pages_blocks_content_order_idx").on(columns._order),
    _parentIDIdx: index("pages_blocks_content_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("pages_blocks_content_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [pages.id],
      name: "pages_blocks_content_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const pages_blocks_media_block = pgTable(
  "pages_blocks_media_block",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    media: integer("media_id").references(() => media.id, {
      onDelete: "set null",
    }),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("pages_blocks_media_block_order_idx").on(columns._order),
    _parentIDIdx: index("pages_blocks_media_block_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("pages_blocks_media_block_path_idx").on(columns._path),
    pages_blocks_media_block_media_idx: index(
      "pages_blocks_media_block_media_idx",
    ).on(columns.media),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [pages.id],
      name: "pages_blocks_media_block_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const pages_blocks_archive = pgTable(
  "pages_blocks_archive",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    introContent: jsonb("intro_content"),
    populateBy:
      enum_pages_blocks_archive_populate_by("populate_by").default(
        "collection",
      ),
    relationTo:
      enum_pages_blocks_archive_relation_to("relation_to").default("products"),
    limit: numeric("limit").default("10"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("pages_blocks_archive_order_idx").on(columns._order),
    _parentIDIdx: index("pages_blocks_archive_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("pages_blocks_archive_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [pages.id],
      name: "pages_blocks_archive_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const pages_blocks_carousel = pgTable(
  "pages_blocks_carousel",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    populateBy:
      enum_pages_blocks_carousel_populate_by("populate_by").default(
        "collection",
      ),
    relationTo:
      enum_pages_blocks_carousel_relation_to("relation_to").default("products"),
    limit: numeric("limit").default("10"),
    populatedDocsTotal: numeric("populated_docs_total"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("pages_blocks_carousel_order_idx").on(columns._order),
    _parentIDIdx: index("pages_blocks_carousel_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("pages_blocks_carousel_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [pages.id],
      name: "pages_blocks_carousel_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const pages_blocks_three_item_grid = pgTable(
  "pages_blocks_three_item_grid",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("pages_blocks_three_item_grid_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index("pages_blocks_three_item_grid_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("pages_blocks_three_item_grid_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [pages.id],
      name: "pages_blocks_three_item_grid_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const pages_blocks_banner = pgTable(
  "pages_blocks_banner",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    style: enum_pages_blocks_banner_style("style").default("info"),
    content: jsonb("content"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("pages_blocks_banner_order_idx").on(columns._order),
    _parentIDIdx: index("pages_blocks_banner_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("pages_blocks_banner_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [pages.id],
      name: "pages_blocks_banner_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const pages_blocks_form_block = pgTable(
  "pages_blocks_form_block",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    form: integer("form_id").references(() => forms.id, {
      onDelete: "set null",
    }),
    enableIntro: boolean("enable_intro"),
    introContent: jsonb("intro_content"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("pages_blocks_form_block_order_idx").on(columns._order),
    _parentIDIdx: index("pages_blocks_form_block_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("pages_blocks_form_block_path_idx").on(columns._path),
    pages_blocks_form_block_form_idx: index(
      "pages_blocks_form_block_form_idx",
    ).on(columns.form),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [pages.id],
      name: "pages_blocks_form_block_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const pages = pgTable(
  "pages",
  {
    id: serial("id").primaryKey(),
    title: varchar("title"),
    publishedOn: timestamp("published_on", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    hero_type: enum_pages_hero_type("hero_type").default("lowImpact"),
    hero_richText: jsonb("hero_rich_text"),
    hero_media: integer("hero_media_id").references(() => media.id, {
      onDelete: "set null",
    }),
    meta_title: varchar("meta_title"),
    meta_image: integer("meta_image_id").references(() => media.id, {
      onDelete: "set null",
    }),
    meta_description: varchar("meta_description"),
    slug: varchar("slug"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    _status: enum_pages_status("_status").default("draft"),
  },
  (columns) => ({
    pages_hero_hero_media_idx: index("pages_hero_hero_media_idx").on(
      columns.hero_media,
    ),
    pages_meta_meta_image_idx: index("pages_meta_meta_image_idx").on(
      columns.meta_image,
    ),
    pages_slug_idx: index("pages_slug_idx").on(columns.slug),
    pages_updated_at_idx: index("pages_updated_at_idx").on(columns.updatedAt),
    pages_created_at_idx: index("pages_created_at_idx").on(columns.createdAt),
    pages__status_idx: index("pages__status_idx").on(columns._status),
  }),
);

export const pages_rels = pgTable(
  "pages_rels",
  {
    id: serial("id").primaryKey(),
    order: integer("order"),
    parent: integer("parent_id").notNull(),
    path: varchar("path").notNull(),
    pagesID: integer("pages_id"),
    categoriesID: integer("categories_id"),
    productsID: integer("products_id"),
  },
  (columns) => ({
    order: index("pages_rels_order_idx").on(columns.order),
    parentIdx: index("pages_rels_parent_idx").on(columns.parent),
    pathIdx: index("pages_rels_path_idx").on(columns.path),
    pages_rels_pages_id_idx: index("pages_rels_pages_id_idx").on(
      columns.pagesID,
    ),
    pages_rels_categories_id_idx: index("pages_rels_categories_id_idx").on(
      columns.categoriesID,
    ),
    pages_rels_products_id_idx: index("pages_rels_products_id_idx").on(
      columns.productsID,
    ),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [pages.id],
      name: "pages_rels_parent_fk",
    }).onDelete("cascade"),
    pagesIdFk: foreignKey({
      columns: [columns["pagesID"]],
      foreignColumns: [pages.id],
      name: "pages_rels_pages_fk",
    }).onDelete("cascade"),
    categoriesIdFk: foreignKey({
      columns: [columns["categoriesID"]],
      foreignColumns: [categories.id],
      name: "pages_rels_categories_fk",
    }).onDelete("cascade"),
    productsIdFk: foreignKey({
      columns: [columns["productsID"]],
      foreignColumns: [products.id],
      name: "pages_rels_products_fk",
    }).onDelete("cascade"),
  }),
);

export const _pages_v_version_hero_links = pgTable(
  "_pages_v_version_hero_links",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: serial("id").primaryKey(),
    link_type:
      enum__pages_v_version_hero_links_link_type("link_type").default(
        "reference",
      ),
    link_newTab: boolean("link_new_tab"),
    link_url: varchar("link_url"),
    link_label: varchar("link_label"),
    link_appearance:
      enum__pages_v_version_hero_links_link_appearance(
        "link_appearance",
      ).default("default"),
    _uuid: varchar("_uuid"),
  },
  (columns) => ({
    _orderIdx: index("_pages_v_version_hero_links_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index("_pages_v_version_hero_links_parent_id_idx").on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_pages_v.id],
      name: "_pages_v_version_hero_links_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _pages_v_blocks_cta_links = pgTable(
  "_pages_v_blocks_cta_links",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: serial("id").primaryKey(),
    link_type:
      enum__pages_v_blocks_cta_links_link_type("link_type").default(
        "reference",
      ),
    link_newTab: boolean("link_new_tab"),
    link_url: varchar("link_url"),
    link_label: varchar("link_label"),
    link_appearance:
      enum__pages_v_blocks_cta_links_link_appearance("link_appearance").default(
        "default",
      ),
    _uuid: varchar("_uuid"),
  },
  (columns) => ({
    _orderIdx: index("_pages_v_blocks_cta_links_order_idx").on(columns._order),
    _parentIDIdx: index("_pages_v_blocks_cta_links_parent_id_idx").on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_pages_v_blocks_cta.id],
      name: "_pages_v_blocks_cta_links_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _pages_v_blocks_cta = pgTable(
  "_pages_v_blocks_cta",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: serial("id").primaryKey(),
    richText: jsonb("rich_text"),
    _uuid: varchar("_uuid"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("_pages_v_blocks_cta_order_idx").on(columns._order),
    _parentIDIdx: index("_pages_v_blocks_cta_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("_pages_v_blocks_cta_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_pages_v.id],
      name: "_pages_v_blocks_cta_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _pages_v_blocks_content_columns = pgTable(
  "_pages_v_blocks_content_columns",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: serial("id").primaryKey(),
    size: enum__pages_v_blocks_content_columns_size("size").default("oneThird"),
    richText: jsonb("rich_text"),
    enableLink: boolean("enable_link"),
    link_type:
      enum__pages_v_blocks_content_columns_link_type("link_type").default(
        "reference",
      ),
    link_newTab: boolean("link_new_tab"),
    link_url: varchar("link_url"),
    link_label: varchar("link_label"),
    link_appearance:
      enum__pages_v_blocks_content_columns_link_appearance(
        "link_appearance",
      ).default("default"),
    _uuid: varchar("_uuid"),
  },
  (columns) => ({
    _orderIdx: index("_pages_v_blocks_content_columns_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index("_pages_v_blocks_content_columns_parent_id_idx").on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_pages_v_blocks_content.id],
      name: "_pages_v_blocks_content_columns_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _pages_v_blocks_content = pgTable(
  "_pages_v_blocks_content",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: serial("id").primaryKey(),
    _uuid: varchar("_uuid"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("_pages_v_blocks_content_order_idx").on(columns._order),
    _parentIDIdx: index("_pages_v_blocks_content_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("_pages_v_blocks_content_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_pages_v.id],
      name: "_pages_v_blocks_content_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _pages_v_blocks_media_block = pgTable(
  "_pages_v_blocks_media_block",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: serial("id").primaryKey(),
    media: integer("media_id").references(() => media.id, {
      onDelete: "set null",
    }),
    _uuid: varchar("_uuid"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("_pages_v_blocks_media_block_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index("_pages_v_blocks_media_block_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("_pages_v_blocks_media_block_path_idx").on(columns._path),
    _pages_v_blocks_media_block_media_idx: index(
      "_pages_v_blocks_media_block_media_idx",
    ).on(columns.media),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_pages_v.id],
      name: "_pages_v_blocks_media_block_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _pages_v_blocks_archive = pgTable(
  "_pages_v_blocks_archive",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: serial("id").primaryKey(),
    introContent: jsonb("intro_content"),
    populateBy:
      enum__pages_v_blocks_archive_populate_by("populate_by").default(
        "collection",
      ),
    relationTo:
      enum__pages_v_blocks_archive_relation_to("relation_to").default(
        "products",
      ),
    limit: numeric("limit").default("10"),
    _uuid: varchar("_uuid"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("_pages_v_blocks_archive_order_idx").on(columns._order),
    _parentIDIdx: index("_pages_v_blocks_archive_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("_pages_v_blocks_archive_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_pages_v.id],
      name: "_pages_v_blocks_archive_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _pages_v_blocks_carousel = pgTable(
  "_pages_v_blocks_carousel",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: serial("id").primaryKey(),
    populateBy:
      enum__pages_v_blocks_carousel_populate_by("populate_by").default(
        "collection",
      ),
    relationTo:
      enum__pages_v_blocks_carousel_relation_to("relation_to").default(
        "products",
      ),
    limit: numeric("limit").default("10"),
    populatedDocsTotal: numeric("populated_docs_total"),
    _uuid: varchar("_uuid"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("_pages_v_blocks_carousel_order_idx").on(columns._order),
    _parentIDIdx: index("_pages_v_blocks_carousel_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("_pages_v_blocks_carousel_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_pages_v.id],
      name: "_pages_v_blocks_carousel_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _pages_v_blocks_three_item_grid = pgTable(
  "_pages_v_blocks_three_item_grid",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: serial("id").primaryKey(),
    _uuid: varchar("_uuid"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("_pages_v_blocks_three_item_grid_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index("_pages_v_blocks_three_item_grid_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("_pages_v_blocks_three_item_grid_path_idx").on(
      columns._path,
    ),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_pages_v.id],
      name: "_pages_v_blocks_three_item_grid_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _pages_v_blocks_banner = pgTable(
  "_pages_v_blocks_banner",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: serial("id").primaryKey(),
    style: enum__pages_v_blocks_banner_style("style").default("info"),
    content: jsonb("content"),
    _uuid: varchar("_uuid"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("_pages_v_blocks_banner_order_idx").on(columns._order),
    _parentIDIdx: index("_pages_v_blocks_banner_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("_pages_v_blocks_banner_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_pages_v.id],
      name: "_pages_v_blocks_banner_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _pages_v_blocks_form_block = pgTable(
  "_pages_v_blocks_form_block",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: serial("id").primaryKey(),
    form: integer("form_id").references(() => forms.id, {
      onDelete: "set null",
    }),
    enableIntro: boolean("enable_intro"),
    introContent: jsonb("intro_content"),
    _uuid: varchar("_uuid"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("_pages_v_blocks_form_block_order_idx").on(columns._order),
    _parentIDIdx: index("_pages_v_blocks_form_block_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("_pages_v_blocks_form_block_path_idx").on(columns._path),
    _pages_v_blocks_form_block_form_idx: index(
      "_pages_v_blocks_form_block_form_idx",
    ).on(columns.form),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [_pages_v.id],
      name: "_pages_v_blocks_form_block_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const _pages_v = pgTable(
  "_pages_v",
  {
    id: serial("id").primaryKey(),
    parent: integer("parent_id").references(() => pages.id, {
      onDelete: "set null",
    }),
    version_title: varchar("version_title"),
    version_publishedOn: timestamp("version_published_on", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    version_hero_type:
      enum__pages_v_version_hero_type("version_hero_type").default("lowImpact"),
    version_hero_richText: jsonb("version_hero_rich_text"),
    version_hero_media: integer("version_hero_media_id").references(
      () => media.id,
      {
        onDelete: "set null",
      },
    ),
    version_meta_title: varchar("version_meta_title"),
    version_meta_image: integer("version_meta_image_id").references(
      () => media.id,
      {
        onDelete: "set null",
      },
    ),
    version_meta_description: varchar("version_meta_description"),
    version_slug: varchar("version_slug"),
    version_updatedAt: timestamp("version_updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    version_createdAt: timestamp("version_created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    version__status:
      enum__pages_v_version_status("version__status").default("draft"),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    latest: boolean("latest"),
    autosave: boolean("autosave"),
  },
  (columns) => ({
    _pages_v_parent_idx: index("_pages_v_parent_idx").on(columns.parent),
    _pages_v_version_hero_version_hero_media_idx: index(
      "_pages_v_version_hero_version_hero_media_idx",
    ).on(columns.version_hero_media),
    _pages_v_version_meta_version_meta_image_idx: index(
      "_pages_v_version_meta_version_meta_image_idx",
    ).on(columns.version_meta_image),
    _pages_v_version_version_slug_idx: index(
      "_pages_v_version_version_slug_idx",
    ).on(columns.version_slug),
    _pages_v_version_version_updated_at_idx: index(
      "_pages_v_version_version_updated_at_idx",
    ).on(columns.version_updatedAt),
    _pages_v_version_version_created_at_idx: index(
      "_pages_v_version_version_created_at_idx",
    ).on(columns.version_createdAt),
    _pages_v_version_version__status_idx: index(
      "_pages_v_version_version__status_idx",
    ).on(columns.version__status),
    _pages_v_created_at_idx: index("_pages_v_created_at_idx").on(
      columns.createdAt,
    ),
    _pages_v_updated_at_idx: index("_pages_v_updated_at_idx").on(
      columns.updatedAt,
    ),
    _pages_v_latest_idx: index("_pages_v_latest_idx").on(columns.latest),
    _pages_v_autosave_idx: index("_pages_v_autosave_idx").on(columns.autosave),
  }),
);

export const _pages_v_rels = pgTable(
  "_pages_v_rels",
  {
    id: serial("id").primaryKey(),
    order: integer("order"),
    parent: integer("parent_id").notNull(),
    path: varchar("path").notNull(),
    pagesID: integer("pages_id"),
    categoriesID: integer("categories_id"),
    productsID: integer("products_id"),
  },
  (columns) => ({
    order: index("_pages_v_rels_order_idx").on(columns.order),
    parentIdx: index("_pages_v_rels_parent_idx").on(columns.parent),
    pathIdx: index("_pages_v_rels_path_idx").on(columns.path),
    _pages_v_rels_pages_id_idx: index("_pages_v_rels_pages_id_idx").on(
      columns.pagesID,
    ),
    _pages_v_rels_categories_id_idx: index(
      "_pages_v_rels_categories_id_idx",
    ).on(columns.categoriesID),
    _pages_v_rels_products_id_idx: index("_pages_v_rels_products_id_idx").on(
      columns.productsID,
    ),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [_pages_v.id],
      name: "_pages_v_rels_parent_fk",
    }).onDelete("cascade"),
    pagesIdFk: foreignKey({
      columns: [columns["pagesID"]],
      foreignColumns: [pages.id],
      name: "_pages_v_rels_pages_fk",
    }).onDelete("cascade"),
    categoriesIdFk: foreignKey({
      columns: [columns["categoriesID"]],
      foreignColumns: [categories.id],
      name: "_pages_v_rels_categories_fk",
    }).onDelete("cascade"),
    productsIdFk: foreignKey({
      columns: [columns["productsID"]],
      foreignColumns: [products.id],
      name: "_pages_v_rels_products_fk",
    }).onDelete("cascade"),
  }),
);

export const categories_breadcrumbs = pgTable(
  "categories_breadcrumbs",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    doc: integer("doc_id").references(() => categories.id, {
      onDelete: "set null",
    }),
    url: varchar("url"),
    label: varchar("label"),
  },
  (columns) => ({
    _orderIdx: index("categories_breadcrumbs_order_idx").on(columns._order),
    _parentIDIdx: index("categories_breadcrumbs_parent_id_idx").on(
      columns._parentID,
    ),
    categories_breadcrumbs_doc_idx: index("categories_breadcrumbs_doc_idx").on(
      columns.doc,
    ),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [categories.id],
      name: "categories_breadcrumbs_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const categories = pgTable(
  "categories",
  {
    id: serial("id").primaryKey(),
    title: varchar("title").notNull(),
    image: integer("image_id").references(() => media.id, {
      onDelete: "set null",
    }),
    slug: varchar("slug").notNull(),
    parent: integer("parent_id").references((): AnyPgColumn => categories.id, {
      onDelete: "set null",
    }),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    categories_image_idx: index("categories_image_idx").on(columns.image),
    categories_parent_idx: index("categories_parent_idx").on(columns.parent),
    categories_updated_at_idx: index("categories_updated_at_idx").on(
      columns.updatedAt,
    ),
    categories_created_at_idx: index("categories_created_at_idx").on(
      columns.createdAt,
    ),
  }),
);

export const media = pgTable(
  "media",
  {
    id: serial("id").primaryKey(),
    alt: varchar("alt").notNull(),
    caption: jsonb("caption"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    url: varchar("url"),
    thumbnailURL: varchar("thumbnail_u_r_l"),
    filename: varchar("filename"),
    mimeType: varchar("mime_type"),
    filesize: numeric("filesize"),
    width: numeric("width"),
    height: numeric("height"),
    focalX: numeric("focal_x"),
    focalY: numeric("focal_y"),
  },
  (columns) => ({
    media_updated_at_idx: index("media_updated_at_idx").on(columns.updatedAt),
    media_created_at_idx: index("media_created_at_idx").on(columns.createdAt),
    media_filename_idx: uniqueIndex("media_filename_idx").on(columns.filename),
  }),
);

export const orders_items = pgTable(
  "orders_items",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    product: integer("product_id")
      .notNull()
      .references(() => products.id, {
        onDelete: "set null",
      }),
    variant: varchar("variant"),
    quantity: numeric("quantity"),
  },
  (columns) => ({
    _orderIdx: index("orders_items_order_idx").on(columns._order),
    _parentIDIdx: index("orders_items_parent_id_idx").on(columns._parentID),
    orders_items_product_idx: index("orders_items_product_idx").on(
      columns.product,
    ),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [orders.id],
      name: "orders_items_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const orders = pgTable(
  "orders",
  {
    id: serial("id").primaryKey(),
    orderedBy: integer("ordered_by_id").references(() => users.id, {
      onDelete: "set null",
    }),
    email: varchar("email"),
    total: numeric("total").notNull(),
    currency: varchar("currency").notNull(),
    paymentStatus: enum_orders_payment_status("payment_status")
      .notNull()
      .default("pending"),
    paymentNotes: varchar("payment_notes"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    orders_ordered_by_idx: index("orders_ordered_by_idx").on(columns.orderedBy),
    orders_updated_at_idx: index("orders_updated_at_idx").on(columns.updatedAt),
    orders_created_at_idx: index("orders_created_at_idx").on(columns.createdAt),
  }),
);

export const redirects = pgTable(
  "redirects",
  {
    id: serial("id").primaryKey(),
    from: varchar("from").notNull(),
    to_type: enum_redirects_to_type("to_type").default("reference"),
    to_url: varchar("to_url"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    redirects_from_idx: index("redirects_from_idx").on(columns.from),
    redirects_updated_at_idx: index("redirects_updated_at_idx").on(
      columns.updatedAt,
    ),
    redirects_created_at_idx: index("redirects_created_at_idx").on(
      columns.createdAt,
    ),
  }),
);

export const redirects_rels = pgTable(
  "redirects_rels",
  {
    id: serial("id").primaryKey(),
    order: integer("order"),
    parent: integer("parent_id").notNull(),
    path: varchar("path").notNull(),
    pagesID: integer("pages_id"),
    productsID: integer("products_id"),
  },
  (columns) => ({
    order: index("redirects_rels_order_idx").on(columns.order),
    parentIdx: index("redirects_rels_parent_idx").on(columns.parent),
    pathIdx: index("redirects_rels_path_idx").on(columns.path),
    redirects_rels_pages_id_idx: index("redirects_rels_pages_id_idx").on(
      columns.pagesID,
    ),
    redirects_rels_products_id_idx: index("redirects_rels_products_id_idx").on(
      columns.productsID,
    ),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [redirects.id],
      name: "redirects_rels_parent_fk",
    }).onDelete("cascade"),
    pagesIdFk: foreignKey({
      columns: [columns["pagesID"]],
      foreignColumns: [pages.id],
      name: "redirects_rels_pages_fk",
    }).onDelete("cascade"),
    productsIdFk: foreignKey({
      columns: [columns["productsID"]],
      foreignColumns: [products.id],
      name: "redirects_rels_products_fk",
    }).onDelete("cascade"),
  }),
);

export const forms_blocks_checkbox = pgTable(
  "forms_blocks_checkbox",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    name: varchar("name").notNull(),
    label: varchar("label"),
    width: numeric("width"),
    required: boolean("required"),
    defaultValue: boolean("default_value"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("forms_blocks_checkbox_order_idx").on(columns._order),
    _parentIDIdx: index("forms_blocks_checkbox_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("forms_blocks_checkbox_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [forms.id],
      name: "forms_blocks_checkbox_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const forms_blocks_country = pgTable(
  "forms_blocks_country",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    name: varchar("name").notNull(),
    label: varchar("label"),
    width: numeric("width"),
    required: boolean("required"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("forms_blocks_country_order_idx").on(columns._order),
    _parentIDIdx: index("forms_blocks_country_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("forms_blocks_country_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [forms.id],
      name: "forms_blocks_country_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const forms_blocks_email = pgTable(
  "forms_blocks_email",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    name: varchar("name").notNull(),
    label: varchar("label"),
    width: numeric("width"),
    required: boolean("required"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("forms_blocks_email_order_idx").on(columns._order),
    _parentIDIdx: index("forms_blocks_email_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("forms_blocks_email_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [forms.id],
      name: "forms_blocks_email_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const forms_blocks_message = pgTable(
  "forms_blocks_message",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    message: jsonb("message"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("forms_blocks_message_order_idx").on(columns._order),
    _parentIDIdx: index("forms_blocks_message_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("forms_blocks_message_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [forms.id],
      name: "forms_blocks_message_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const forms_blocks_number = pgTable(
  "forms_blocks_number",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    name: varchar("name").notNull(),
    label: varchar("label"),
    width: numeric("width"),
    defaultValue: numeric("default_value"),
    required: boolean("required"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("forms_blocks_number_order_idx").on(columns._order),
    _parentIDIdx: index("forms_blocks_number_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("forms_blocks_number_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [forms.id],
      name: "forms_blocks_number_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const forms_blocks_select_options = pgTable(
  "forms_blocks_select_options",
  {
    _order: integer("_order").notNull(),
    _parentID: varchar("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    label: varchar("label").notNull(),
    value: varchar("value").notNull(),
  },
  (columns) => ({
    _orderIdx: index("forms_blocks_select_options_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index("forms_blocks_select_options_parent_id_idx").on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [forms_blocks_select.id],
      name: "forms_blocks_select_options_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const forms_blocks_select = pgTable(
  "forms_blocks_select",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    name: varchar("name").notNull(),
    label: varchar("label"),
    width: numeric("width"),
    defaultValue: varchar("default_value"),
    required: boolean("required"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("forms_blocks_select_order_idx").on(columns._order),
    _parentIDIdx: index("forms_blocks_select_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("forms_blocks_select_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [forms.id],
      name: "forms_blocks_select_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const forms_blocks_state = pgTable(
  "forms_blocks_state",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    name: varchar("name").notNull(),
    label: varchar("label"),
    width: numeric("width"),
    required: boolean("required"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("forms_blocks_state_order_idx").on(columns._order),
    _parentIDIdx: index("forms_blocks_state_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("forms_blocks_state_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [forms.id],
      name: "forms_blocks_state_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const forms_blocks_text = pgTable(
  "forms_blocks_text",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    name: varchar("name").notNull(),
    label: varchar("label"),
    width: numeric("width"),
    defaultValue: varchar("default_value"),
    required: boolean("required"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("forms_blocks_text_order_idx").on(columns._order),
    _parentIDIdx: index("forms_blocks_text_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("forms_blocks_text_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [forms.id],
      name: "forms_blocks_text_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const forms_blocks_textarea = pgTable(
  "forms_blocks_textarea",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    name: varchar("name").notNull(),
    label: varchar("label"),
    width: numeric("width"),
    defaultValue: varchar("default_value"),
    required: boolean("required"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("forms_blocks_textarea_order_idx").on(columns._order),
    _parentIDIdx: index("forms_blocks_textarea_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("forms_blocks_textarea_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [forms.id],
      name: "forms_blocks_textarea_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const forms_emails = pgTable(
  "forms_emails",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    emailTo: varchar("email_to"),
    cc: varchar("cc"),
    bcc: varchar("bcc"),
    replyTo: varchar("reply_to"),
    emailFrom: varchar("email_from"),
    subject: varchar("subject")
      .notNull()
      .default("You''ve received a new message."),
    message: jsonb("message"),
  },
  (columns) => ({
    _orderIdx: index("forms_emails_order_idx").on(columns._order),
    _parentIDIdx: index("forms_emails_parent_id_idx").on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [forms.id],
      name: "forms_emails_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const forms = pgTable(
  "forms",
  {
    id: serial("id").primaryKey(),
    title: varchar("title").notNull(),
    submitButtonLabel: varchar("submit_button_label"),
    confirmationType:
      enum_forms_confirmation_type("confirmation_type").default("message"),
    confirmationMessage: jsonb("confirmation_message"),
    redirect_url: varchar("redirect_url"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    forms_updated_at_idx: index("forms_updated_at_idx").on(columns.updatedAt),
    forms_created_at_idx: index("forms_created_at_idx").on(columns.createdAt),
  }),
);

export const form_submissions_submission_data = pgTable(
  "form_submissions_submission_data",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    field: varchar("field").notNull(),
    value: varchar("value").notNull(),
  },
  (columns) => ({
    _orderIdx: index("form_submissions_submission_data_order_idx").on(
      columns._order,
    ),
    _parentIDIdx: index("form_submissions_submission_data_parent_id_idx").on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [form_submissions.id],
      name: "form_submissions_submission_data_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const form_submissions = pgTable(
  "form_submissions",
  {
    id: serial("id").primaryKey(),
    form: integer("form_id")
      .notNull()
      .references(() => forms.id, {
        onDelete: "set null",
      }),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    form_submissions_form_idx: index("form_submissions_form_idx").on(
      columns.form,
    ),
    form_submissions_updated_at_idx: index(
      "form_submissions_updated_at_idx",
    ).on(columns.updatedAt),
    form_submissions_created_at_idx: index(
      "form_submissions_created_at_idx",
    ).on(columns.createdAt),
  }),
);

export const search_categories = pgTable(
  "search_categories",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    relationTo: varchar("relation_to"),
    title: varchar("title"),
  },
  (columns) => ({
    _orderIdx: index("search_categories_order_idx").on(columns._order),
    _parentIDIdx: index("search_categories_parent_id_idx").on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [search.id],
      name: "search_categories_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const search = pgTable(
  "search",
  {
    id: serial("id").primaryKey(),
    title: varchar("title"),
    priority: numeric("priority"),
    slug: varchar("slug"),
    meta_title: varchar("meta_title"),
    meta_description: varchar("meta_description"),
    meta_image: integer("meta_image_id").references(() => media.id, {
      onDelete: "set null",
    }),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    search_slug_idx: index("search_slug_idx").on(columns.slug),
    search_meta_meta_image_idx: index("search_meta_meta_image_idx").on(
      columns.meta_image,
    ),
    search_updated_at_idx: index("search_updated_at_idx").on(columns.updatedAt),
    search_created_at_idx: index("search_created_at_idx").on(columns.createdAt),
  }),
);

export const search_rels = pgTable(
  "search_rels",
  {
    id: serial("id").primaryKey(),
    order: integer("order"),
    parent: integer("parent_id").notNull(),
    path: varchar("path").notNull(),
    productsID: integer("products_id"),
  },
  (columns) => ({
    order: index("search_rels_order_idx").on(columns.order),
    parentIdx: index("search_rels_parent_idx").on(columns.parent),
    pathIdx: index("search_rels_path_idx").on(columns.path),
    search_rels_products_id_idx: index("search_rels_products_id_idx").on(
      columns.productsID,
    ),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [search.id],
      name: "search_rels_parent_fk",
    }).onDelete("cascade"),
    productsIdFk: foreignKey({
      columns: [columns["productsID"]],
      foreignColumns: [products.id],
      name: "search_rels_products_fk",
    }).onDelete("cascade"),
  }),
);

export const payload_locked_documents = pgTable(
  "payload_locked_documents",
  {
    id: serial("id").primaryKey(),
    globalSlug: varchar("global_slug"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_locked_documents_global_slug_idx: index(
      "payload_locked_documents_global_slug_idx",
    ).on(columns.globalSlug),
    payload_locked_documents_updated_at_idx: index(
      "payload_locked_documents_updated_at_idx",
    ).on(columns.updatedAt),
    payload_locked_documents_created_at_idx: index(
      "payload_locked_documents_created_at_idx",
    ).on(columns.createdAt),
  }),
);

export const payload_locked_documents_rels = pgTable(
  "payload_locked_documents_rels",
  {
    id: serial("id").primaryKey(),
    order: integer("order"),
    parent: integer("parent_id").notNull(),
    path: varchar("path").notNull(),
    usersID: integer("users_id"),
    productsID: integer("products_id"),
    pagesID: integer("pages_id"),
    categoriesID: integer("categories_id"),
    mediaID: integer("media_id"),
    ordersID: integer("orders_id"),
    redirectsID: integer("redirects_id"),
    formsID: integer("forms_id"),
    "form-submissionsID": integer("form_submissions_id"),
    searchID: integer("search_id"),
  },
  (columns) => ({
    order: index("payload_locked_documents_rels_order_idx").on(columns.order),
    parentIdx: index("payload_locked_documents_rels_parent_idx").on(
      columns.parent,
    ),
    pathIdx: index("payload_locked_documents_rels_path_idx").on(columns.path),
    payload_locked_documents_rels_users_id_idx: index(
      "payload_locked_documents_rels_users_id_idx",
    ).on(columns.usersID),
    payload_locked_documents_rels_products_id_idx: index(
      "payload_locked_documents_rels_products_id_idx",
    ).on(columns.productsID),
    payload_locked_documents_rels_pages_id_idx: index(
      "payload_locked_documents_rels_pages_id_idx",
    ).on(columns.pagesID),
    payload_locked_documents_rels_categories_id_idx: index(
      "payload_locked_documents_rels_categories_id_idx",
    ).on(columns.categoriesID),
    payload_locked_documents_rels_media_id_idx: index(
      "payload_locked_documents_rels_media_id_idx",
    ).on(columns.mediaID),
    payload_locked_documents_rels_orders_id_idx: index(
      "payload_locked_documents_rels_orders_id_idx",
    ).on(columns.ordersID),
    payload_locked_documents_rels_redirects_id_idx: index(
      "payload_locked_documents_rels_redirects_id_idx",
    ).on(columns.redirectsID),
    payload_locked_documents_rels_forms_id_idx: index(
      "payload_locked_documents_rels_forms_id_idx",
    ).on(columns.formsID),
    payload_locked_documents_rels_form_submissions_id_idx: index(
      "payload_locked_documents_rels_form_submissions_id_idx",
    ).on(columns["form-submissionsID"]),
    payload_locked_documents_rels_search_id_idx: index(
      "payload_locked_documents_rels_search_id_idx",
    ).on(columns.searchID),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [payload_locked_documents.id],
      name: "payload_locked_documents_rels_parent_fk",
    }).onDelete("cascade"),
    usersIdFk: foreignKey({
      columns: [columns["usersID"]],
      foreignColumns: [users.id],
      name: "payload_locked_documents_rels_users_fk",
    }).onDelete("cascade"),
    productsIdFk: foreignKey({
      columns: [columns["productsID"]],
      foreignColumns: [products.id],
      name: "payload_locked_documents_rels_products_fk",
    }).onDelete("cascade"),
    pagesIdFk: foreignKey({
      columns: [columns["pagesID"]],
      foreignColumns: [pages.id],
      name: "payload_locked_documents_rels_pages_fk",
    }).onDelete("cascade"),
    categoriesIdFk: foreignKey({
      columns: [columns["categoriesID"]],
      foreignColumns: [categories.id],
      name: "payload_locked_documents_rels_categories_fk",
    }).onDelete("cascade"),
    mediaIdFk: foreignKey({
      columns: [columns["mediaID"]],
      foreignColumns: [media.id],
      name: "payload_locked_documents_rels_media_fk",
    }).onDelete("cascade"),
    ordersIdFk: foreignKey({
      columns: [columns["ordersID"]],
      foreignColumns: [orders.id],
      name: "payload_locked_documents_rels_orders_fk",
    }).onDelete("cascade"),
    redirectsIdFk: foreignKey({
      columns: [columns["redirectsID"]],
      foreignColumns: [redirects.id],
      name: "payload_locked_documents_rels_redirects_fk",
    }).onDelete("cascade"),
    formsIdFk: foreignKey({
      columns: [columns["formsID"]],
      foreignColumns: [forms.id],
      name: "payload_locked_documents_rels_forms_fk",
    }).onDelete("cascade"),
    "form-submissionsIdFk": foreignKey({
      columns: [columns["form-submissionsID"]],
      foreignColumns: [form_submissions.id],
      name: "payload_locked_documents_rels_form_submissions_fk",
    }).onDelete("cascade"),
    searchIdFk: foreignKey({
      columns: [columns["searchID"]],
      foreignColumns: [search.id],
      name: "payload_locked_documents_rels_search_fk",
    }).onDelete("cascade"),
  }),
);

export const payload_preferences = pgTable(
  "payload_preferences",
  {
    id: serial("id").primaryKey(),
    key: varchar("key"),
    value: jsonb("value"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_preferences_key_idx: index("payload_preferences_key_idx").on(
      columns.key,
    ),
    payload_preferences_updated_at_idx: index(
      "payload_preferences_updated_at_idx",
    ).on(columns.updatedAt),
    payload_preferences_created_at_idx: index(
      "payload_preferences_created_at_idx",
    ).on(columns.createdAt),
  }),
);

export const payload_preferences_rels = pgTable(
  "payload_preferences_rels",
  {
    id: serial("id").primaryKey(),
    order: integer("order"),
    parent: integer("parent_id").notNull(),
    path: varchar("path").notNull(),
    usersID: integer("users_id"),
  },
  (columns) => ({
    order: index("payload_preferences_rels_order_idx").on(columns.order),
    parentIdx: index("payload_preferences_rels_parent_idx").on(columns.parent),
    pathIdx: index("payload_preferences_rels_path_idx").on(columns.path),
    payload_preferences_rels_users_id_idx: index(
      "payload_preferences_rels_users_id_idx",
    ).on(columns.usersID),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [payload_preferences.id],
      name: "payload_preferences_rels_parent_fk",
    }).onDelete("cascade"),
    usersIdFk: foreignKey({
      columns: [columns["usersID"]],
      foreignColumns: [users.id],
      name: "payload_preferences_rels_users_fk",
    }).onDelete("cascade"),
  }),
);

export const payload_migrations = pgTable(
  "payload_migrations",
  {
    id: serial("id").primaryKey(),
    name: varchar("name"),
    batch: numeric("batch"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_migrations_updated_at_idx: index(
      "payload_migrations_updated_at_idx",
    ).on(columns.updatedAt),
    payload_migrations_created_at_idx: index(
      "payload_migrations_created_at_idx",
    ).on(columns.createdAt),
  }),
);

export const footer_nav_items = pgTable(
  "footer_nav_items",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    link_type:
      enum_footer_nav_items_link_type("link_type").default("reference"),
    link_newTab: boolean("link_new_tab"),
    link_url: varchar("link_url"),
    link_label: varchar("link_label").notNull(),
  },
  (columns) => ({
    _orderIdx: index("footer_nav_items_order_idx").on(columns._order),
    _parentIDIdx: index("footer_nav_items_parent_id_idx").on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [footer.id],
      name: "footer_nav_items_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const footer = pgTable("footer", {
  id: serial("id").primaryKey(),
  updatedAt: timestamp("updated_at", {
    mode: "string",
    withTimezone: true,
    precision: 3,
  }),
  createdAt: timestamp("created_at", {
    mode: "string",
    withTimezone: true,
    precision: 3,
  }),
});

export const footer_rels = pgTable(
  "footer_rels",
  {
    id: serial("id").primaryKey(),
    order: integer("order"),
    parent: integer("parent_id").notNull(),
    path: varchar("path").notNull(),
    pagesID: integer("pages_id"),
  },
  (columns) => ({
    order: index("footer_rels_order_idx").on(columns.order),
    parentIdx: index("footer_rels_parent_idx").on(columns.parent),
    pathIdx: index("footer_rels_path_idx").on(columns.path),
    footer_rels_pages_id_idx: index("footer_rels_pages_id_idx").on(
      columns.pagesID,
    ),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [footer.id],
      name: "footer_rels_parent_fk",
    }).onDelete("cascade"),
    pagesIdFk: foreignKey({
      columns: [columns["pagesID"]],
      foreignColumns: [pages.id],
      name: "footer_rels_pages_fk",
    }).onDelete("cascade"),
  }),
);

export const header_nav_items = pgTable(
  "header_nav_items",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    link_type:
      enum_header_nav_items_link_type("link_type").default("reference"),
    link_newTab: boolean("link_new_tab"),
    link_url: varchar("link_url"),
    link_label: varchar("link_label").notNull(),
  },
  (columns) => ({
    _orderIdx: index("header_nav_items_order_idx").on(columns._order),
    _parentIDIdx: index("header_nav_items_parent_id_idx").on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [header.id],
      name: "header_nav_items_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const header = pgTable("header", {
  id: serial("id").primaryKey(),
  updatedAt: timestamp("updated_at", {
    mode: "string",
    withTimezone: true,
    precision: 3,
  }),
  createdAt: timestamp("created_at", {
    mode: "string",
    withTimezone: true,
    precision: 3,
  }),
});

export const header_rels = pgTable(
  "header_rels",
  {
    id: serial("id").primaryKey(),
    order: integer("order"),
    parent: integer("parent_id").notNull(),
    path: varchar("path").notNull(),
    pagesID: integer("pages_id"),
  },
  (columns) => ({
    order: index("header_rels_order_idx").on(columns.order),
    parentIdx: index("header_rels_parent_idx").on(columns.parent),
    pathIdx: index("header_rels_path_idx").on(columns.path),
    header_rels_pages_id_idx: index("header_rels_pages_id_idx").on(
      columns.pagesID,
    ),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [header.id],
      name: "header_rels_parent_fk",
    }).onDelete("cascade"),
    pagesIdFk: foreignKey({
      columns: [columns["pagesID"]],
      foreignColumns: [pages.id],
      name: "header_rels_pages_fk",
    }).onDelete("cascade"),
  }),
);

export const relations_users_roles = relations(users_roles, ({ one }) => ({
  parent: one(users, {
    fields: [users_roles.parent],
    references: [users.id],
    relationName: "roles",
  }),
}));
export const relations_users_cart_items = relations(
  users_cart_items,
  ({ one }) => ({
    _parentID: one(users, {
      fields: [users_cart_items._parentID],
      references: [users.id],
      relationName: "cart_items",
    }),
    product: one(products, {
      fields: [users_cart_items.product],
      references: [products.id],
      relationName: "product",
    }),
  }),
);
export const relations_users = relations(users, ({ many }) => ({
  roles: many(users_roles, {
    relationName: "roles",
  }),
  cart_items: many(users_cart_items, {
    relationName: "cart_items",
  }),
}));
export const relations_products_blocks_cta_links = relations(
  products_blocks_cta_links,
  ({ one }) => ({
    _parentID: one(products_blocks_cta, {
      fields: [products_blocks_cta_links._parentID],
      references: [products_blocks_cta.id],
      relationName: "links",
    }),
  }),
);
export const relations_products_blocks_cta = relations(
  products_blocks_cta,
  ({ one, many }) => ({
    _parentID: one(products, {
      fields: [products_blocks_cta._parentID],
      references: [products.id],
      relationName: "_blocks_cta",
    }),
    links: many(products_blocks_cta_links, {
      relationName: "links",
    }),
  }),
);
export const relations_products_blocks_content_columns = relations(
  products_blocks_content_columns,
  ({ one }) => ({
    _parentID: one(products_blocks_content, {
      fields: [products_blocks_content_columns._parentID],
      references: [products_blocks_content.id],
      relationName: "columns",
    }),
  }),
);
export const relations_products_blocks_content = relations(
  products_blocks_content,
  ({ one, many }) => ({
    _parentID: one(products, {
      fields: [products_blocks_content._parentID],
      references: [products.id],
      relationName: "_blocks_content",
    }),
    columns: many(products_blocks_content_columns, {
      relationName: "columns",
    }),
  }),
);
export const relations_products_blocks_media_block = relations(
  products_blocks_media_block,
  ({ one }) => ({
    _parentID: one(products, {
      fields: [products_blocks_media_block._parentID],
      references: [products.id],
      relationName: "_blocks_mediaBlock",
    }),
    media: one(media, {
      fields: [products_blocks_media_block.media],
      references: [media.id],
      relationName: "media",
    }),
  }),
);
export const relations_products_variants_options_values = relations(
  products_variants_options_values,
  ({ one }) => ({
    _parentID: one(products_variants_options, {
      fields: [products_variants_options_values._parentID],
      references: [products_variants_options.id],
      relationName: "values",
    }),
  }),
);
export const relations_products_variants_options = relations(
  products_variants_options,
  ({ one, many }) => ({
    _parentID: one(products, {
      fields: [products_variants_options._parentID],
      references: [products.id],
      relationName: "variants_options",
    }),
    values: many(products_variants_options_values, {
      relationName: "values",
    }),
  }),
);
export const relations_products_variants_variants_options = relations(
  products_variants_variants_options,
  ({ one }) => ({
    _parentID: one(products_variants_variants, {
      fields: [products_variants_variants_options._parentID],
      references: [products_variants_variants.id],
      relationName: "options",
    }),
  }),
);
export const relations_products_variants_variants = relations(
  products_variants_variants,
  ({ one, many }) => ({
    _parentID: one(products, {
      fields: [products_variants_variants._parentID],
      references: [products.id],
      relationName: "variants_variants",
    }),
    options: many(products_variants_variants_options, {
      relationName: "options",
    }),
  }),
);
export const relations_products_rels = relations(products_rels, ({ one }) => ({
  parent: one(products, {
    fields: [products_rels.parent],
    references: [products.id],
    relationName: "_rels",
  }),
  mediaID: one(media, {
    fields: [products_rels.mediaID],
    references: [media.id],
    relationName: "media",
  }),
  pagesID: one(pages, {
    fields: [products_rels.pagesID],
    references: [pages.id],
    relationName: "pages",
  }),
  productsID: one(products, {
    fields: [products_rels.productsID],
    references: [products.id],
    relationName: "products",
  }),
  categoriesID: one(categories, {
    fields: [products_rels.categoriesID],
    references: [categories.id],
    relationName: "categories",
  }),
}));
export const relations_products = relations(products, ({ one, many }) => ({
  _blocks_cta: many(products_blocks_cta, {
    relationName: "_blocks_cta",
  }),
  _blocks_content: many(products_blocks_content, {
    relationName: "_blocks_content",
  }),
  _blocks_mediaBlock: many(products_blocks_media_block, {
    relationName: "_blocks_mediaBlock",
  }),
  variants_options: many(products_variants_options, {
    relationName: "variants_options",
  }),
  variants_variants: many(products_variants_variants, {
    relationName: "variants_variants",
  }),
  meta_image: one(media, {
    fields: [products.meta_image],
    references: [media.id],
    relationName: "meta_image",
  }),
  _rels: many(products_rels, {
    relationName: "_rels",
  }),
}));
export const relations__products_v_blocks_cta_links = relations(
  _products_v_blocks_cta_links,
  ({ one }) => ({
    _parentID: one(_products_v_blocks_cta, {
      fields: [_products_v_blocks_cta_links._parentID],
      references: [_products_v_blocks_cta.id],
      relationName: "links",
    }),
  }),
);
export const relations__products_v_blocks_cta = relations(
  _products_v_blocks_cta,
  ({ one, many }) => ({
    _parentID: one(_products_v, {
      fields: [_products_v_blocks_cta._parentID],
      references: [_products_v.id],
      relationName: "_blocks_cta",
    }),
    links: many(_products_v_blocks_cta_links, {
      relationName: "links",
    }),
  }),
);
export const relations__products_v_blocks_content_columns = relations(
  _products_v_blocks_content_columns,
  ({ one }) => ({
    _parentID: one(_products_v_blocks_content, {
      fields: [_products_v_blocks_content_columns._parentID],
      references: [_products_v_blocks_content.id],
      relationName: "columns",
    }),
  }),
);
export const relations__products_v_blocks_content = relations(
  _products_v_blocks_content,
  ({ one, many }) => ({
    _parentID: one(_products_v, {
      fields: [_products_v_blocks_content._parentID],
      references: [_products_v.id],
      relationName: "_blocks_content",
    }),
    columns: many(_products_v_blocks_content_columns, {
      relationName: "columns",
    }),
  }),
);
export const relations__products_v_blocks_media_block = relations(
  _products_v_blocks_media_block,
  ({ one }) => ({
    _parentID: one(_products_v, {
      fields: [_products_v_blocks_media_block._parentID],
      references: [_products_v.id],
      relationName: "_blocks_mediaBlock",
    }),
    media: one(media, {
      fields: [_products_v_blocks_media_block.media],
      references: [media.id],
      relationName: "media",
    }),
  }),
);
export const relations__products_v_version_variants_options_values = relations(
  _products_v_version_variants_options_values,
  ({ one }) => ({
    _parentID: one(_products_v_version_variants_options, {
      fields: [_products_v_version_variants_options_values._parentID],
      references: [_products_v_version_variants_options.id],
      relationName: "values",
    }),
  }),
);
export const relations__products_v_version_variants_options = relations(
  _products_v_version_variants_options,
  ({ one, many }) => ({
    _parentID: one(_products_v, {
      fields: [_products_v_version_variants_options._parentID],
      references: [_products_v.id],
      relationName: "version_variants_options",
    }),
    values: many(_products_v_version_variants_options_values, {
      relationName: "values",
    }),
  }),
);
export const relations__products_v_version_variants_variants_options =
  relations(_products_v_version_variants_variants_options, ({ one }) => ({
    _parentID: one(_products_v_version_variants_variants, {
      fields: [_products_v_version_variants_variants_options._parentID],
      references: [_products_v_version_variants_variants.id],
      relationName: "options",
    }),
  }));
export const relations__products_v_version_variants_variants = relations(
  _products_v_version_variants_variants,
  ({ one, many }) => ({
    _parentID: one(_products_v, {
      fields: [_products_v_version_variants_variants._parentID],
      references: [_products_v.id],
      relationName: "version_variants_variants",
    }),
    options: many(_products_v_version_variants_variants_options, {
      relationName: "options",
    }),
  }),
);
export const relations__products_v_rels = relations(
  _products_v_rels,
  ({ one }) => ({
    parent: one(_products_v, {
      fields: [_products_v_rels.parent],
      references: [_products_v.id],
      relationName: "_rels",
    }),
    mediaID: one(media, {
      fields: [_products_v_rels.mediaID],
      references: [media.id],
      relationName: "media",
    }),
    pagesID: one(pages, {
      fields: [_products_v_rels.pagesID],
      references: [pages.id],
      relationName: "pages",
    }),
    productsID: one(products, {
      fields: [_products_v_rels.productsID],
      references: [products.id],
      relationName: "products",
    }),
    categoriesID: one(categories, {
      fields: [_products_v_rels.categoriesID],
      references: [categories.id],
      relationName: "categories",
    }),
  }),
);
export const relations__products_v = relations(
  _products_v,
  ({ one, many }) => ({
    parent: one(products, {
      fields: [_products_v.parent],
      references: [products.id],
      relationName: "parent",
    }),
    _blocks_cta: many(_products_v_blocks_cta, {
      relationName: "_blocks_cta",
    }),
    _blocks_content: many(_products_v_blocks_content, {
      relationName: "_blocks_content",
    }),
    _blocks_mediaBlock: many(_products_v_blocks_media_block, {
      relationName: "_blocks_mediaBlock",
    }),
    version_variants_options: many(_products_v_version_variants_options, {
      relationName: "version_variants_options",
    }),
    version_variants_variants: many(_products_v_version_variants_variants, {
      relationName: "version_variants_variants",
    }),
    version_meta_image: one(media, {
      fields: [_products_v.version_meta_image],
      references: [media.id],
      relationName: "version_meta_image",
    }),
    _rels: many(_products_v_rels, {
      relationName: "_rels",
    }),
  }),
);
export const relations_pages_hero_links = relations(
  pages_hero_links,
  ({ one }) => ({
    _parentID: one(pages, {
      fields: [pages_hero_links._parentID],
      references: [pages.id],
      relationName: "hero_links",
    }),
  }),
);
export const relations_pages_blocks_cta_links = relations(
  pages_blocks_cta_links,
  ({ one }) => ({
    _parentID: one(pages_blocks_cta, {
      fields: [pages_blocks_cta_links._parentID],
      references: [pages_blocks_cta.id],
      relationName: "links",
    }),
  }),
);
export const relations_pages_blocks_cta = relations(
  pages_blocks_cta,
  ({ one, many }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_cta._parentID],
      references: [pages.id],
      relationName: "_blocks_cta",
    }),
    links: many(pages_blocks_cta_links, {
      relationName: "links",
    }),
  }),
);
export const relations_pages_blocks_content_columns = relations(
  pages_blocks_content_columns,
  ({ one }) => ({
    _parentID: one(pages_blocks_content, {
      fields: [pages_blocks_content_columns._parentID],
      references: [pages_blocks_content.id],
      relationName: "columns",
    }),
  }),
);
export const relations_pages_blocks_content = relations(
  pages_blocks_content,
  ({ one, many }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_content._parentID],
      references: [pages.id],
      relationName: "_blocks_content",
    }),
    columns: many(pages_blocks_content_columns, {
      relationName: "columns",
    }),
  }),
);
export const relations_pages_blocks_media_block = relations(
  pages_blocks_media_block,
  ({ one }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_media_block._parentID],
      references: [pages.id],
      relationName: "_blocks_mediaBlock",
    }),
    media: one(media, {
      fields: [pages_blocks_media_block.media],
      references: [media.id],
      relationName: "media",
    }),
  }),
);
export const relations_pages_blocks_archive = relations(
  pages_blocks_archive,
  ({ one }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_archive._parentID],
      references: [pages.id],
      relationName: "_blocks_archive",
    }),
  }),
);
export const relations_pages_blocks_carousel = relations(
  pages_blocks_carousel,
  ({ one }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_carousel._parentID],
      references: [pages.id],
      relationName: "_blocks_carousel",
    }),
  }),
);
export const relations_pages_blocks_three_item_grid = relations(
  pages_blocks_three_item_grid,
  ({ one }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_three_item_grid._parentID],
      references: [pages.id],
      relationName: "_blocks_threeItemGrid",
    }),
  }),
);
export const relations_pages_blocks_banner = relations(
  pages_blocks_banner,
  ({ one }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_banner._parentID],
      references: [pages.id],
      relationName: "_blocks_banner",
    }),
  }),
);
export const relations_pages_blocks_form_block = relations(
  pages_blocks_form_block,
  ({ one }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_form_block._parentID],
      references: [pages.id],
      relationName: "_blocks_formBlock",
    }),
    form: one(forms, {
      fields: [pages_blocks_form_block.form],
      references: [forms.id],
      relationName: "form",
    }),
  }),
);
export const relations_pages_rels = relations(pages_rels, ({ one }) => ({
  parent: one(pages, {
    fields: [pages_rels.parent],
    references: [pages.id],
    relationName: "_rels",
  }),
  pagesID: one(pages, {
    fields: [pages_rels.pagesID],
    references: [pages.id],
    relationName: "pages",
  }),
  categoriesID: one(categories, {
    fields: [pages_rels.categoriesID],
    references: [categories.id],
    relationName: "categories",
  }),
  productsID: one(products, {
    fields: [pages_rels.productsID],
    references: [products.id],
    relationName: "products",
  }),
}));
export const relations_pages = relations(pages, ({ one, many }) => ({
  hero_links: many(pages_hero_links, {
    relationName: "hero_links",
  }),
  hero_media: one(media, {
    fields: [pages.hero_media],
    references: [media.id],
    relationName: "hero_media",
  }),
  _blocks_cta: many(pages_blocks_cta, {
    relationName: "_blocks_cta",
  }),
  _blocks_content: many(pages_blocks_content, {
    relationName: "_blocks_content",
  }),
  _blocks_mediaBlock: many(pages_blocks_media_block, {
    relationName: "_blocks_mediaBlock",
  }),
  _blocks_archive: many(pages_blocks_archive, {
    relationName: "_blocks_archive",
  }),
  _blocks_carousel: many(pages_blocks_carousel, {
    relationName: "_blocks_carousel",
  }),
  _blocks_threeItemGrid: many(pages_blocks_three_item_grid, {
    relationName: "_blocks_threeItemGrid",
  }),
  _blocks_banner: many(pages_blocks_banner, {
    relationName: "_blocks_banner",
  }),
  _blocks_formBlock: many(pages_blocks_form_block, {
    relationName: "_blocks_formBlock",
  }),
  meta_image: one(media, {
    fields: [pages.meta_image],
    references: [media.id],
    relationName: "meta_image",
  }),
  _rels: many(pages_rels, {
    relationName: "_rels",
  }),
}));
export const relations__pages_v_version_hero_links = relations(
  _pages_v_version_hero_links,
  ({ one }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_version_hero_links._parentID],
      references: [_pages_v.id],
      relationName: "version_hero_links",
    }),
  }),
);
export const relations__pages_v_blocks_cta_links = relations(
  _pages_v_blocks_cta_links,
  ({ one }) => ({
    _parentID: one(_pages_v_blocks_cta, {
      fields: [_pages_v_blocks_cta_links._parentID],
      references: [_pages_v_blocks_cta.id],
      relationName: "links",
    }),
  }),
);
export const relations__pages_v_blocks_cta = relations(
  _pages_v_blocks_cta,
  ({ one, many }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_cta._parentID],
      references: [_pages_v.id],
      relationName: "_blocks_cta",
    }),
    links: many(_pages_v_blocks_cta_links, {
      relationName: "links",
    }),
  }),
);
export const relations__pages_v_blocks_content_columns = relations(
  _pages_v_blocks_content_columns,
  ({ one }) => ({
    _parentID: one(_pages_v_blocks_content, {
      fields: [_pages_v_blocks_content_columns._parentID],
      references: [_pages_v_blocks_content.id],
      relationName: "columns",
    }),
  }),
);
export const relations__pages_v_blocks_content = relations(
  _pages_v_blocks_content,
  ({ one, many }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_content._parentID],
      references: [_pages_v.id],
      relationName: "_blocks_content",
    }),
    columns: many(_pages_v_blocks_content_columns, {
      relationName: "columns",
    }),
  }),
);
export const relations__pages_v_blocks_media_block = relations(
  _pages_v_blocks_media_block,
  ({ one }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_media_block._parentID],
      references: [_pages_v.id],
      relationName: "_blocks_mediaBlock",
    }),
    media: one(media, {
      fields: [_pages_v_blocks_media_block.media],
      references: [media.id],
      relationName: "media",
    }),
  }),
);
export const relations__pages_v_blocks_archive = relations(
  _pages_v_blocks_archive,
  ({ one }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_archive._parentID],
      references: [_pages_v.id],
      relationName: "_blocks_archive",
    }),
  }),
);
export const relations__pages_v_blocks_carousel = relations(
  _pages_v_blocks_carousel,
  ({ one }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_carousel._parentID],
      references: [_pages_v.id],
      relationName: "_blocks_carousel",
    }),
  }),
);
export const relations__pages_v_blocks_three_item_grid = relations(
  _pages_v_blocks_three_item_grid,
  ({ one }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_three_item_grid._parentID],
      references: [_pages_v.id],
      relationName: "_blocks_threeItemGrid",
    }),
  }),
);
export const relations__pages_v_blocks_banner = relations(
  _pages_v_blocks_banner,
  ({ one }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_banner._parentID],
      references: [_pages_v.id],
      relationName: "_blocks_banner",
    }),
  }),
);
export const relations__pages_v_blocks_form_block = relations(
  _pages_v_blocks_form_block,
  ({ one }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_form_block._parentID],
      references: [_pages_v.id],
      relationName: "_blocks_formBlock",
    }),
    form: one(forms, {
      fields: [_pages_v_blocks_form_block.form],
      references: [forms.id],
      relationName: "form",
    }),
  }),
);
export const relations__pages_v_rels = relations(_pages_v_rels, ({ one }) => ({
  parent: one(_pages_v, {
    fields: [_pages_v_rels.parent],
    references: [_pages_v.id],
    relationName: "_rels",
  }),
  pagesID: one(pages, {
    fields: [_pages_v_rels.pagesID],
    references: [pages.id],
    relationName: "pages",
  }),
  categoriesID: one(categories, {
    fields: [_pages_v_rels.categoriesID],
    references: [categories.id],
    relationName: "categories",
  }),
  productsID: one(products, {
    fields: [_pages_v_rels.productsID],
    references: [products.id],
    relationName: "products",
  }),
}));
export const relations__pages_v = relations(_pages_v, ({ one, many }) => ({
  parent: one(pages, {
    fields: [_pages_v.parent],
    references: [pages.id],
    relationName: "parent",
  }),
  version_hero_links: many(_pages_v_version_hero_links, {
    relationName: "version_hero_links",
  }),
  version_hero_media: one(media, {
    fields: [_pages_v.version_hero_media],
    references: [media.id],
    relationName: "version_hero_media",
  }),
  _blocks_cta: many(_pages_v_blocks_cta, {
    relationName: "_blocks_cta",
  }),
  _blocks_content: many(_pages_v_blocks_content, {
    relationName: "_blocks_content",
  }),
  _blocks_mediaBlock: many(_pages_v_blocks_media_block, {
    relationName: "_blocks_mediaBlock",
  }),
  _blocks_archive: many(_pages_v_blocks_archive, {
    relationName: "_blocks_archive",
  }),
  _blocks_carousel: many(_pages_v_blocks_carousel, {
    relationName: "_blocks_carousel",
  }),
  _blocks_threeItemGrid: many(_pages_v_blocks_three_item_grid, {
    relationName: "_blocks_threeItemGrid",
  }),
  _blocks_banner: many(_pages_v_blocks_banner, {
    relationName: "_blocks_banner",
  }),
  _blocks_formBlock: many(_pages_v_blocks_form_block, {
    relationName: "_blocks_formBlock",
  }),
  version_meta_image: one(media, {
    fields: [_pages_v.version_meta_image],
    references: [media.id],
    relationName: "version_meta_image",
  }),
  _rels: many(_pages_v_rels, {
    relationName: "_rels",
  }),
}));
export const relations_categories_breadcrumbs = relations(
  categories_breadcrumbs,
  ({ one }) => ({
    _parentID: one(categories, {
      fields: [categories_breadcrumbs._parentID],
      references: [categories.id],
      relationName: "breadcrumbs",
    }),
    doc: one(categories, {
      fields: [categories_breadcrumbs.doc],
      references: [categories.id],
      relationName: "doc",
    }),
  }),
);
export const relations_categories = relations(categories, ({ one, many }) => ({
  image: one(media, {
    fields: [categories.image],
    references: [media.id],
    relationName: "image",
  }),
  parent: one(categories, {
    fields: [categories.parent],
    references: [categories.id],
    relationName: "parent",
  }),
  breadcrumbs: many(categories_breadcrumbs, {
    relationName: "breadcrumbs",
  }),
}));
export const relations_media = relations(media, () => ({}));
export const relations_orders_items = relations(orders_items, ({ one }) => ({
  _parentID: one(orders, {
    fields: [orders_items._parentID],
    references: [orders.id],
    relationName: "items",
  }),
  product: one(products, {
    fields: [orders_items.product],
    references: [products.id],
    relationName: "product",
  }),
}));
export const relations_orders = relations(orders, ({ one, many }) => ({
  orderedBy: one(users, {
    fields: [orders.orderedBy],
    references: [users.id],
    relationName: "orderedBy",
  }),
  items: many(orders_items, {
    relationName: "items",
  }),
}));
export const relations_redirects_rels = relations(
  redirects_rels,
  ({ one }) => ({
    parent: one(redirects, {
      fields: [redirects_rels.parent],
      references: [redirects.id],
      relationName: "_rels",
    }),
    pagesID: one(pages, {
      fields: [redirects_rels.pagesID],
      references: [pages.id],
      relationName: "pages",
    }),
    productsID: one(products, {
      fields: [redirects_rels.productsID],
      references: [products.id],
      relationName: "products",
    }),
  }),
);
export const relations_redirects = relations(redirects, ({ many }) => ({
  _rels: many(redirects_rels, {
    relationName: "_rels",
  }),
}));
export const relations_forms_blocks_checkbox = relations(
  forms_blocks_checkbox,
  ({ one }) => ({
    _parentID: one(forms, {
      fields: [forms_blocks_checkbox._parentID],
      references: [forms.id],
      relationName: "_blocks_checkbox",
    }),
  }),
);
export const relations_forms_blocks_country = relations(
  forms_blocks_country,
  ({ one }) => ({
    _parentID: one(forms, {
      fields: [forms_blocks_country._parentID],
      references: [forms.id],
      relationName: "_blocks_country",
    }),
  }),
);
export const relations_forms_blocks_email = relations(
  forms_blocks_email,
  ({ one }) => ({
    _parentID: one(forms, {
      fields: [forms_blocks_email._parentID],
      references: [forms.id],
      relationName: "_blocks_email",
    }),
  }),
);
export const relations_forms_blocks_message = relations(
  forms_blocks_message,
  ({ one }) => ({
    _parentID: one(forms, {
      fields: [forms_blocks_message._parentID],
      references: [forms.id],
      relationName: "_blocks_message",
    }),
  }),
);
export const relations_forms_blocks_number = relations(
  forms_blocks_number,
  ({ one }) => ({
    _parentID: one(forms, {
      fields: [forms_blocks_number._parentID],
      references: [forms.id],
      relationName: "_blocks_number",
    }),
  }),
);
export const relations_forms_blocks_select_options = relations(
  forms_blocks_select_options,
  ({ one }) => ({
    _parentID: one(forms_blocks_select, {
      fields: [forms_blocks_select_options._parentID],
      references: [forms_blocks_select.id],
      relationName: "options",
    }),
  }),
);
export const relations_forms_blocks_select = relations(
  forms_blocks_select,
  ({ one, many }) => ({
    _parentID: one(forms, {
      fields: [forms_blocks_select._parentID],
      references: [forms.id],
      relationName: "_blocks_select",
    }),
    options: many(forms_blocks_select_options, {
      relationName: "options",
    }),
  }),
);
export const relations_forms_blocks_state = relations(
  forms_blocks_state,
  ({ one }) => ({
    _parentID: one(forms, {
      fields: [forms_blocks_state._parentID],
      references: [forms.id],
      relationName: "_blocks_state",
    }),
  }),
);
export const relations_forms_blocks_text = relations(
  forms_blocks_text,
  ({ one }) => ({
    _parentID: one(forms, {
      fields: [forms_blocks_text._parentID],
      references: [forms.id],
      relationName: "_blocks_text",
    }),
  }),
);
export const relations_forms_blocks_textarea = relations(
  forms_blocks_textarea,
  ({ one }) => ({
    _parentID: one(forms, {
      fields: [forms_blocks_textarea._parentID],
      references: [forms.id],
      relationName: "_blocks_textarea",
    }),
  }),
);
export const relations_forms_emails = relations(forms_emails, ({ one }) => ({
  _parentID: one(forms, {
    fields: [forms_emails._parentID],
    references: [forms.id],
    relationName: "emails",
  }),
}));
export const relations_forms = relations(forms, ({ many }) => ({
  _blocks_checkbox: many(forms_blocks_checkbox, {
    relationName: "_blocks_checkbox",
  }),
  _blocks_country: many(forms_blocks_country, {
    relationName: "_blocks_country",
  }),
  _blocks_email: many(forms_blocks_email, {
    relationName: "_blocks_email",
  }),
  _blocks_message: many(forms_blocks_message, {
    relationName: "_blocks_message",
  }),
  _blocks_number: many(forms_blocks_number, {
    relationName: "_blocks_number",
  }),
  _blocks_select: many(forms_blocks_select, {
    relationName: "_blocks_select",
  }),
  _blocks_state: many(forms_blocks_state, {
    relationName: "_blocks_state",
  }),
  _blocks_text: many(forms_blocks_text, {
    relationName: "_blocks_text",
  }),
  _blocks_textarea: many(forms_blocks_textarea, {
    relationName: "_blocks_textarea",
  }),
  emails: many(forms_emails, {
    relationName: "emails",
  }),
}));
export const relations_form_submissions_submission_data = relations(
  form_submissions_submission_data,
  ({ one }) => ({
    _parentID: one(form_submissions, {
      fields: [form_submissions_submission_data._parentID],
      references: [form_submissions.id],
      relationName: "submissionData",
    }),
  }),
);
export const relations_form_submissions = relations(
  form_submissions,
  ({ one, many }) => ({
    form: one(forms, {
      fields: [form_submissions.form],
      references: [forms.id],
      relationName: "form",
    }),
    submissionData: many(form_submissions_submission_data, {
      relationName: "submissionData",
    }),
  }),
);
export const relations_search_categories = relations(
  search_categories,
  ({ one }) => ({
    _parentID: one(search, {
      fields: [search_categories._parentID],
      references: [search.id],
      relationName: "categories",
    }),
  }),
);
export const relations_search_rels = relations(search_rels, ({ one }) => ({
  parent: one(search, {
    fields: [search_rels.parent],
    references: [search.id],
    relationName: "_rels",
  }),
  productsID: one(products, {
    fields: [search_rels.productsID],
    references: [products.id],
    relationName: "products",
  }),
}));
export const relations_search = relations(search, ({ one, many }) => ({
  meta_image: one(media, {
    fields: [search.meta_image],
    references: [media.id],
    relationName: "meta_image",
  }),
  categories: many(search_categories, {
    relationName: "categories",
  }),
  _rels: many(search_rels, {
    relationName: "_rels",
  }),
}));
export const relations_payload_locked_documents_rels = relations(
  payload_locked_documents_rels,
  ({ one }) => ({
    parent: one(payload_locked_documents, {
      fields: [payload_locked_documents_rels.parent],
      references: [payload_locked_documents.id],
      relationName: "_rels",
    }),
    usersID: one(users, {
      fields: [payload_locked_documents_rels.usersID],
      references: [users.id],
      relationName: "users",
    }),
    productsID: one(products, {
      fields: [payload_locked_documents_rels.productsID],
      references: [products.id],
      relationName: "products",
    }),
    pagesID: one(pages, {
      fields: [payload_locked_documents_rels.pagesID],
      references: [pages.id],
      relationName: "pages",
    }),
    categoriesID: one(categories, {
      fields: [payload_locked_documents_rels.categoriesID],
      references: [categories.id],
      relationName: "categories",
    }),
    mediaID: one(media, {
      fields: [payload_locked_documents_rels.mediaID],
      references: [media.id],
      relationName: "media",
    }),
    ordersID: one(orders, {
      fields: [payload_locked_documents_rels.ordersID],
      references: [orders.id],
      relationName: "orders",
    }),
    redirectsID: one(redirects, {
      fields: [payload_locked_documents_rels.redirectsID],
      references: [redirects.id],
      relationName: "redirects",
    }),
    formsID: one(forms, {
      fields: [payload_locked_documents_rels.formsID],
      references: [forms.id],
      relationName: "forms",
    }),
    "form-submissionsID": one(form_submissions, {
      fields: [payload_locked_documents_rels["form-submissionsID"]],
      references: [form_submissions.id],
      relationName: "form-submissions",
    }),
    searchID: one(search, {
      fields: [payload_locked_documents_rels.searchID],
      references: [search.id],
      relationName: "search",
    }),
  }),
);
export const relations_payload_locked_documents = relations(
  payload_locked_documents,
  ({ many }) => ({
    _rels: many(payload_locked_documents_rels, {
      relationName: "_rels",
    }),
  }),
);
export const relations_payload_preferences_rels = relations(
  payload_preferences_rels,
  ({ one }) => ({
    parent: one(payload_preferences, {
      fields: [payload_preferences_rels.parent],
      references: [payload_preferences.id],
      relationName: "_rels",
    }),
    usersID: one(users, {
      fields: [payload_preferences_rels.usersID],
      references: [users.id],
      relationName: "users",
    }),
  }),
);
export const relations_payload_preferences = relations(
  payload_preferences,
  ({ many }) => ({
    _rels: many(payload_preferences_rels, {
      relationName: "_rels",
    }),
  }),
);
export const relations_payload_migrations = relations(
  payload_migrations,
  () => ({}),
);
export const relations_footer_nav_items = relations(
  footer_nav_items,
  ({ one }) => ({
    _parentID: one(footer, {
      fields: [footer_nav_items._parentID],
      references: [footer.id],
      relationName: "navItems",
    }),
  }),
);
export const relations_footer_rels = relations(footer_rels, ({ one }) => ({
  parent: one(footer, {
    fields: [footer_rels.parent],
    references: [footer.id],
    relationName: "_rels",
  }),
  pagesID: one(pages, {
    fields: [footer_rels.pagesID],
    references: [pages.id],
    relationName: "pages",
  }),
}));
export const relations_footer = relations(footer, ({ many }) => ({
  navItems: many(footer_nav_items, {
    relationName: "navItems",
  }),
  _rels: many(footer_rels, {
    relationName: "_rels",
  }),
}));
export const relations_header_nav_items = relations(
  header_nav_items,
  ({ one }) => ({
    _parentID: one(header, {
      fields: [header_nav_items._parentID],
      references: [header.id],
      relationName: "navItems",
    }),
  }),
);
export const relations_header_rels = relations(header_rels, ({ one }) => ({
  parent: one(header, {
    fields: [header_rels.parent],
    references: [header.id],
    relationName: "_rels",
  }),
  pagesID: one(pages, {
    fields: [header_rels.pagesID],
    references: [pages.id],
    relationName: "pages",
  }),
}));
export const relations_header = relations(header, ({ many }) => ({
  navItems: many(header_nav_items, {
    relationName: "navItems",
  }),
  _rels: many(header_rels, {
    relationName: "_rels",
  }),
}));

type DatabaseSchema = {
  enum_users_roles: typeof enum_users_roles;
  enum_products_blocks_cta_links_link_type: typeof enum_products_blocks_cta_links_link_type;
  enum_products_blocks_cta_links_link_appearance: typeof enum_products_blocks_cta_links_link_appearance;
  enum_products_blocks_content_columns_size: typeof enum_products_blocks_content_columns_size;
  enum_products_blocks_content_columns_link_type: typeof enum_products_blocks_content_columns_link_type;
  enum_products_blocks_content_columns_link_appearance: typeof enum_products_blocks_content_columns_link_appearance;
  enum_products_status: typeof enum_products_status;
  enum__products_v_blocks_cta_links_link_type: typeof enum__products_v_blocks_cta_links_link_type;
  enum__products_v_blocks_cta_links_link_appearance: typeof enum__products_v_blocks_cta_links_link_appearance;
  enum__products_v_blocks_content_columns_size: typeof enum__products_v_blocks_content_columns_size;
  enum__products_v_blocks_content_columns_link_type: typeof enum__products_v_blocks_content_columns_link_type;
  enum__products_v_blocks_content_columns_link_appearance: typeof enum__products_v_blocks_content_columns_link_appearance;
  enum__products_v_version_status: typeof enum__products_v_version_status;
  enum_pages_hero_links_link_type: typeof enum_pages_hero_links_link_type;
  enum_pages_hero_links_link_appearance: typeof enum_pages_hero_links_link_appearance;
  enum_pages_blocks_cta_links_link_type: typeof enum_pages_blocks_cta_links_link_type;
  enum_pages_blocks_cta_links_link_appearance: typeof enum_pages_blocks_cta_links_link_appearance;
  enum_pages_blocks_content_columns_size: typeof enum_pages_blocks_content_columns_size;
  enum_pages_blocks_content_columns_link_type: typeof enum_pages_blocks_content_columns_link_type;
  enum_pages_blocks_content_columns_link_appearance: typeof enum_pages_blocks_content_columns_link_appearance;
  enum_pages_blocks_archive_populate_by: typeof enum_pages_blocks_archive_populate_by;
  enum_pages_blocks_archive_relation_to: typeof enum_pages_blocks_archive_relation_to;
  enum_pages_blocks_carousel_populate_by: typeof enum_pages_blocks_carousel_populate_by;
  enum_pages_blocks_carousel_relation_to: typeof enum_pages_blocks_carousel_relation_to;
  enum_pages_blocks_banner_style: typeof enum_pages_blocks_banner_style;
  enum_pages_hero_type: typeof enum_pages_hero_type;
  enum_pages_status: typeof enum_pages_status;
  enum__pages_v_version_hero_links_link_type: typeof enum__pages_v_version_hero_links_link_type;
  enum__pages_v_version_hero_links_link_appearance: typeof enum__pages_v_version_hero_links_link_appearance;
  enum__pages_v_blocks_cta_links_link_type: typeof enum__pages_v_blocks_cta_links_link_type;
  enum__pages_v_blocks_cta_links_link_appearance: typeof enum__pages_v_blocks_cta_links_link_appearance;
  enum__pages_v_blocks_content_columns_size: typeof enum__pages_v_blocks_content_columns_size;
  enum__pages_v_blocks_content_columns_link_type: typeof enum__pages_v_blocks_content_columns_link_type;
  enum__pages_v_blocks_content_columns_link_appearance: typeof enum__pages_v_blocks_content_columns_link_appearance;
  enum__pages_v_blocks_archive_populate_by: typeof enum__pages_v_blocks_archive_populate_by;
  enum__pages_v_blocks_archive_relation_to: typeof enum__pages_v_blocks_archive_relation_to;
  enum__pages_v_blocks_carousel_populate_by: typeof enum__pages_v_blocks_carousel_populate_by;
  enum__pages_v_blocks_carousel_relation_to: typeof enum__pages_v_blocks_carousel_relation_to;
  enum__pages_v_blocks_banner_style: typeof enum__pages_v_blocks_banner_style;
  enum__pages_v_version_hero_type: typeof enum__pages_v_version_hero_type;
  enum__pages_v_version_status: typeof enum__pages_v_version_status;
  enum_orders_payment_status: typeof enum_orders_payment_status;
  enum_redirects_to_type: typeof enum_redirects_to_type;
  enum_forms_confirmation_type: typeof enum_forms_confirmation_type;
  enum_footer_nav_items_link_type: typeof enum_footer_nav_items_link_type;
  enum_header_nav_items_link_type: typeof enum_header_nav_items_link_type;
  users_roles: typeof users_roles;
  users_cart_items: typeof users_cart_items;
  users: typeof users;
  products_blocks_cta_links: typeof products_blocks_cta_links;
  products_blocks_cta: typeof products_blocks_cta;
  products_blocks_content_columns: typeof products_blocks_content_columns;
  products_blocks_content: typeof products_blocks_content;
  products_blocks_media_block: typeof products_blocks_media_block;
  products_variants_options_values: typeof products_variants_options_values;
  products_variants_options: typeof products_variants_options;
  products_variants_variants_options: typeof products_variants_variants_options;
  products_variants_variants: typeof products_variants_variants;
  products: typeof products;
  products_rels: typeof products_rels;
  _products_v_blocks_cta_links: typeof _products_v_blocks_cta_links;
  _products_v_blocks_cta: typeof _products_v_blocks_cta;
  _products_v_blocks_content_columns: typeof _products_v_blocks_content_columns;
  _products_v_blocks_content: typeof _products_v_blocks_content;
  _products_v_blocks_media_block: typeof _products_v_blocks_media_block;
  _products_v_version_variants_options_values: typeof _products_v_version_variants_options_values;
  _products_v_version_variants_options: typeof _products_v_version_variants_options;
  _products_v_version_variants_variants_options: typeof _products_v_version_variants_variants_options;
  _products_v_version_variants_variants: typeof _products_v_version_variants_variants;
  _products_v: typeof _products_v;
  _products_v_rels: typeof _products_v_rels;
  pages_hero_links: typeof pages_hero_links;
  pages_blocks_cta_links: typeof pages_blocks_cta_links;
  pages_blocks_cta: typeof pages_blocks_cta;
  pages_blocks_content_columns: typeof pages_blocks_content_columns;
  pages_blocks_content: typeof pages_blocks_content;
  pages_blocks_media_block: typeof pages_blocks_media_block;
  pages_blocks_archive: typeof pages_blocks_archive;
  pages_blocks_carousel: typeof pages_blocks_carousel;
  pages_blocks_three_item_grid: typeof pages_blocks_three_item_grid;
  pages_blocks_banner: typeof pages_blocks_banner;
  pages_blocks_form_block: typeof pages_blocks_form_block;
  pages: typeof pages;
  pages_rels: typeof pages_rels;
  _pages_v_version_hero_links: typeof _pages_v_version_hero_links;
  _pages_v_blocks_cta_links: typeof _pages_v_blocks_cta_links;
  _pages_v_blocks_cta: typeof _pages_v_blocks_cta;
  _pages_v_blocks_content_columns: typeof _pages_v_blocks_content_columns;
  _pages_v_blocks_content: typeof _pages_v_blocks_content;
  _pages_v_blocks_media_block: typeof _pages_v_blocks_media_block;
  _pages_v_blocks_archive: typeof _pages_v_blocks_archive;
  _pages_v_blocks_carousel: typeof _pages_v_blocks_carousel;
  _pages_v_blocks_three_item_grid: typeof _pages_v_blocks_three_item_grid;
  _pages_v_blocks_banner: typeof _pages_v_blocks_banner;
  _pages_v_blocks_form_block: typeof _pages_v_blocks_form_block;
  _pages_v: typeof _pages_v;
  _pages_v_rels: typeof _pages_v_rels;
  categories_breadcrumbs: typeof categories_breadcrumbs;
  categories: typeof categories;
  media: typeof media;
  orders_items: typeof orders_items;
  orders: typeof orders;
  redirects: typeof redirects;
  redirects_rels: typeof redirects_rels;
  forms_blocks_checkbox: typeof forms_blocks_checkbox;
  forms_blocks_country: typeof forms_blocks_country;
  forms_blocks_email: typeof forms_blocks_email;
  forms_blocks_message: typeof forms_blocks_message;
  forms_blocks_number: typeof forms_blocks_number;
  forms_blocks_select_options: typeof forms_blocks_select_options;
  forms_blocks_select: typeof forms_blocks_select;
  forms_blocks_state: typeof forms_blocks_state;
  forms_blocks_text: typeof forms_blocks_text;
  forms_blocks_textarea: typeof forms_blocks_textarea;
  forms_emails: typeof forms_emails;
  forms: typeof forms;
  form_submissions_submission_data: typeof form_submissions_submission_data;
  form_submissions: typeof form_submissions;
  search_categories: typeof search_categories;
  search: typeof search;
  search_rels: typeof search_rels;
  payload_locked_documents: typeof payload_locked_documents;
  payload_locked_documents_rels: typeof payload_locked_documents_rels;
  payload_preferences: typeof payload_preferences;
  payload_preferences_rels: typeof payload_preferences_rels;
  payload_migrations: typeof payload_migrations;
  footer_nav_items: typeof footer_nav_items;
  footer: typeof footer;
  footer_rels: typeof footer_rels;
  header_nav_items: typeof header_nav_items;
  header: typeof header;
  header_rels: typeof header_rels;
  relations_users_roles: typeof relations_users_roles;
  relations_users_cart_items: typeof relations_users_cart_items;
  relations_users: typeof relations_users;
  relations_products_blocks_cta_links: typeof relations_products_blocks_cta_links;
  relations_products_blocks_cta: typeof relations_products_blocks_cta;
  relations_products_blocks_content_columns: typeof relations_products_blocks_content_columns;
  relations_products_blocks_content: typeof relations_products_blocks_content;
  relations_products_blocks_media_block: typeof relations_products_blocks_media_block;
  relations_products_variants_options_values: typeof relations_products_variants_options_values;
  relations_products_variants_options: typeof relations_products_variants_options;
  relations_products_variants_variants_options: typeof relations_products_variants_variants_options;
  relations_products_variants_variants: typeof relations_products_variants_variants;
  relations_products_rels: typeof relations_products_rels;
  relations_products: typeof relations_products;
  relations__products_v_blocks_cta_links: typeof relations__products_v_blocks_cta_links;
  relations__products_v_blocks_cta: typeof relations__products_v_blocks_cta;
  relations__products_v_blocks_content_columns: typeof relations__products_v_blocks_content_columns;
  relations__products_v_blocks_content: typeof relations__products_v_blocks_content;
  relations__products_v_blocks_media_block: typeof relations__products_v_blocks_media_block;
  relations__products_v_version_variants_options_values: typeof relations__products_v_version_variants_options_values;
  relations__products_v_version_variants_options: typeof relations__products_v_version_variants_options;
  relations__products_v_version_variants_variants_options: typeof relations__products_v_version_variants_variants_options;
  relations__products_v_version_variants_variants: typeof relations__products_v_version_variants_variants;
  relations__products_v_rels: typeof relations__products_v_rels;
  relations__products_v: typeof relations__products_v;
  relations_pages_hero_links: typeof relations_pages_hero_links;
  relations_pages_blocks_cta_links: typeof relations_pages_blocks_cta_links;
  relations_pages_blocks_cta: typeof relations_pages_blocks_cta;
  relations_pages_blocks_content_columns: typeof relations_pages_blocks_content_columns;
  relations_pages_blocks_content: typeof relations_pages_blocks_content;
  relations_pages_blocks_media_block: typeof relations_pages_blocks_media_block;
  relations_pages_blocks_archive: typeof relations_pages_blocks_archive;
  relations_pages_blocks_carousel: typeof relations_pages_blocks_carousel;
  relations_pages_blocks_three_item_grid: typeof relations_pages_blocks_three_item_grid;
  relations_pages_blocks_banner: typeof relations_pages_blocks_banner;
  relations_pages_blocks_form_block: typeof relations_pages_blocks_form_block;
  relations_pages_rels: typeof relations_pages_rels;
  relations_pages: typeof relations_pages;
  relations__pages_v_version_hero_links: typeof relations__pages_v_version_hero_links;
  relations__pages_v_blocks_cta_links: typeof relations__pages_v_blocks_cta_links;
  relations__pages_v_blocks_cta: typeof relations__pages_v_blocks_cta;
  relations__pages_v_blocks_content_columns: typeof relations__pages_v_blocks_content_columns;
  relations__pages_v_blocks_content: typeof relations__pages_v_blocks_content;
  relations__pages_v_blocks_media_block: typeof relations__pages_v_blocks_media_block;
  relations__pages_v_blocks_archive: typeof relations__pages_v_blocks_archive;
  relations__pages_v_blocks_carousel: typeof relations__pages_v_blocks_carousel;
  relations__pages_v_blocks_three_item_grid: typeof relations__pages_v_blocks_three_item_grid;
  relations__pages_v_blocks_banner: typeof relations__pages_v_blocks_banner;
  relations__pages_v_blocks_form_block: typeof relations__pages_v_blocks_form_block;
  relations__pages_v_rels: typeof relations__pages_v_rels;
  relations__pages_v: typeof relations__pages_v;
  relations_categories_breadcrumbs: typeof relations_categories_breadcrumbs;
  relations_categories: typeof relations_categories;
  relations_media: typeof relations_media;
  relations_orders_items: typeof relations_orders_items;
  relations_orders: typeof relations_orders;
  relations_redirects_rels: typeof relations_redirects_rels;
  relations_redirects: typeof relations_redirects;
  relations_forms_blocks_checkbox: typeof relations_forms_blocks_checkbox;
  relations_forms_blocks_country: typeof relations_forms_blocks_country;
  relations_forms_blocks_email: typeof relations_forms_blocks_email;
  relations_forms_blocks_message: typeof relations_forms_blocks_message;
  relations_forms_blocks_number: typeof relations_forms_blocks_number;
  relations_forms_blocks_select_options: typeof relations_forms_blocks_select_options;
  relations_forms_blocks_select: typeof relations_forms_blocks_select;
  relations_forms_blocks_state: typeof relations_forms_blocks_state;
  relations_forms_blocks_text: typeof relations_forms_blocks_text;
  relations_forms_blocks_textarea: typeof relations_forms_blocks_textarea;
  relations_forms_emails: typeof relations_forms_emails;
  relations_forms: typeof relations_forms;
  relations_form_submissions_submission_data: typeof relations_form_submissions_submission_data;
  relations_form_submissions: typeof relations_form_submissions;
  relations_search_categories: typeof relations_search_categories;
  relations_search_rels: typeof relations_search_rels;
  relations_search: typeof relations_search;
  relations_payload_locked_documents_rels: typeof relations_payload_locked_documents_rels;
  relations_payload_locked_documents: typeof relations_payload_locked_documents;
  relations_payload_preferences_rels: typeof relations_payload_preferences_rels;
  relations_payload_preferences: typeof relations_payload_preferences;
  relations_payload_migrations: typeof relations_payload_migrations;
  relations_footer_nav_items: typeof relations_footer_nav_items;
  relations_footer_rels: typeof relations_footer_rels;
  relations_footer: typeof relations_footer;
  relations_header_nav_items: typeof relations_header_nav_items;
  relations_header_rels: typeof relations_header_rels;
  relations_header: typeof relations_header;
};

declare module "@payloadcms/db-vercel-postgres/types" {
  export interface GeneratedDatabaseSchema {
    schema: DatabaseSchema;
  }
}
